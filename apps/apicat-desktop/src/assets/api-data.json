{
  "project": {
    "description": "Documentation for the REST api access provided at LexCorp",
    "footer": {
      "title": "Best practices",
      "content": "<h1>Best practices</h1>\n<p>Here we are using the footer file to add documentation on best practices while using <code>apidoc</code>. This text is from &quot;footer.md&quot; and is included the same way as the &quot;header.md&quot; file.</p>\n<h2>Define &amp; use</h2>\n<p>For a better readability in the source code, it is recommended to use <code>@apiDefine</code> and <code>@apiUse</code> as much as possible.</p>\n<h3>Naming</h3>\n<p>You should choose a consistent naming schema, which makes it easier to understand what is defined and included.</p>\n<p>E.g. with <code>@apiUse LoginParam</code>, <code>@apiUse LoginError</code>, <code>@apiUse LoginSuccess</code> you see that parameter-, errors- and success-fields are classified with the suffix <code>Param</code>, <code>Error</code> and <code>Success</code>.</p>\n<h3>Example for parameter</h3>\n<pre class=\"my-4\"><code class=\"language-js\">/**\n * @apiDefine LoginParam\n * @apiParam {String} username Your e-mail-address.\n * @apiParam {String} password Your password.\n */\n\n/**\n * @apiDefine UserParam\n * @apiParam {String} firstname Your firstname.\n * @apiParam {String} lastname  Your lastname.\n * @apiParam {Date}   birthday  Your birthday.\n */\n\n/**\n * @api {GET} /account/register Register a new user.\n * @apiUse LoginParam\n * @apiUse UserParam\n * @apiParam {Boolean} terms Checkbox to accept the terms.\n */\n\n/**\n * @api {GET} /account/login Signin with an existing user.\n * @apiUse LoginParam\n * @apiParam {Boolean} rememberme Checkbox to auto-login on revisit.\n */\n</code></pre>\n<p>Block 1 defines the <code>LoginParam</code> with 2 fields, which are required for register and login. Block 2 defines the <code>UserParam</code> with 3 fields, which are required only for register. Block 3 is the endpoint <code>/account/register</code>, which uses parameters from <code>LoginParam</code>, <code>UserParam</code> and an extra checkbox. Block 4 is the endpoint <code>/account/login</code>, which use only parameters from <code>LoginParam</code> and an extra checkbox.</p>\n<h3>Example for a group</h3>\n<pre class=\"my-4\"><code class=\"language-js\">/**\n * @apiDefine AccountGroup Account endpoints\n *\n * Here is the description for the \"AccountGroup\".\n * It can contain **markdown** syntax.\n */\n\n/**\n * @api {GET} /account/login Signin with an existing user.\n * @apiGroup AccountGroup\n */\n</code></pre>\n<p>Block 1 defines the <code>AccountGroup</code> with a title and a description (the following lines). Block 2 is the endpoint <code>/account/login</code>, which belongs to the group <code>AccountGroup</code> and inherit from there the title and description. <code>@apiGroup name</code> only inherit the title and description, while <code>@apiUse</code> would inherit all defined fields in a block.</p>\n",
      "icon": "fa-lightbulb"
    },
    "header": {
      "title": "Introduction",
      "content": "<h1>Introduction</h1>\n<p>This example documentation contains all the possible configuration options for apidoc.</p>\n<p>To generate this documentation:</p>\n<pre class=\"my-4\"><code class=\"language-bash\">git clone https://github.com/apidoc/apidoc && cd apidoc\nnpm install --prod\n./bin/apidoc -i example -o /tmp/doc\n$BROWSER /tmp/doc\n</code></pre>\n<p>Note that this text is from the file &quot;header.md&quot;.</p>\n<h2><span id=\"api-example-for-a-submenu-entry\">Adding a header</span></h2>\n<p>In your projects &quot;package.json&quot; you can set &quot;apidoc.header&quot; with a title and a filename to include this file into your documentation.</p>\n<p>This example configuration attempts to integrate &quot;header.md&quot; and &quot;footer.md&quot;.</p>\n<pre class=\"my-4\"><code class=\"language-json\">{\n    \"apidoc\": {\n        \"header\": {\n            \"title\": \"Introduction\",\n            \"filename\": \"header.md\"\n        },\n        \"footer\": {\n            \"title\": \"Best practices\",\n            \"filename\": \"footer.md\"\n        }\n    },\n    \"description\": \"apidoc example project.\",\n    \"name\": \"example\",\n    \"version\": \"3.0.0\"\n}\n</code></pre>\n",
      "icon": "fa-home"
    },
    "input": [
      "example"
    ],
    "login": {
      "active": false,
      "urlAuth": "https://bifrost.cleverty.app/sign-in",
      "value_form": {
        "email": "email",
        "password": "password"
      },
      "response_success": 200,
      "response_error": 401
    },
    "logo": {
      "icon": "fa-solid fa-rocket",
      "alt": "API Logo"
    },
    "name": "LexCorp Api documentation",
    "order": [
      "Users",
      "Company",
      "System",
      "City",
      "Category"
    ],
    "output": "/tmp/apidoc-output",
    "sampleUrl": "https://apidoc.free.beeceptor.com",
    "settings": {
      "Users": {
        "icon": "fa-user",
        "title": "Usuarios",
        "filename": "user.md"
      },
      "Company": {
        "icon": "fa-building",
        "title": "Empresa",
        "filename": "company.md"
      },
      "System": {
        "icon": "fa-cog",
        "title": "Sistema",
        "filename": "system.md"
      },
      "City": {
        "icon": "fa-map-marker-alt",
        "title": "Ciudad",
        "filename": "city.md"
      },
      "Category": {
        "icon": "fa-tags",
        "title": "Categor√≠a",
        "filename": "category.md"
      }
    },
    "template": {
      "showRequiredLabels": false,
      "withCompare": true,
      "withGenerator": true,
      "aloneDisplay": false,
      "groupsCollapsible": true,
      "endpointsCollapsible": true
    },
    "title": "Href ApiDoc 4",
    "url": "https://api.example.com",
    "version": "4.0.0",
    "apicat": {
      "enabled": true,
      "outputDir": "./apicat-output",
      "generateCollections": true,
      "enableLocalTesting": true,
      "tauri": {
        "enabled": true,
        "buildDir": "./apps/apicat-desktop"
      }
    },
    "defaultVersion": "0.0.0",
    "apidoc": "4.0.0",
    "generator": {
      "name": "@hrefcl/apidoc-ecosystem",
      "time": "Mon Sep 29 2025 10:41:08 GMT-0300 (hora de verano de Chile)",
      "url": "https://apidoc.app",
      "version": "5.0.0-alpha.1"
    }
  },
  "apis": [
    {
      "type": "post",
      "url": "/api/auth/login",
      "title": "User Authentication",
      "name": "LoginUser",
      "group": "Authentication",
      "version": "4.0.0",
      "description": "<p>Authenticates a user and returns an access token. This endpoint combines manual parameter documentation with schema-based responses.</p>",
      "parameter": {
        "fields": {
          "Body": [
            {
              "group": "Body",
              "type": "String",
              "optional": false,
              "field": "email",
              "isArray": false,
              "description": "<p>User's email address</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": false,
              "field": "password",
              "isArray": false,
              "description": "<p>User's password</p>"
            },
            {
              "group": "Body",
              "type": "Boolean",
              "optional": true,
              "field": "remember_me",
              "isArray": false,
              "defaultValue": "false",
              "description": "<p>Keep session active longer</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "field": "device_name",
              "isArray": false,
              "description": "<p>Name of the device for token identification</p>"
            }
          ]
        }
      },
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "Boolean",
              "optional": false,
              "field": "success",
              "isArray": false,
              "description": "<p>Always true for successful login</p>"
            },
            {
              "group": "Success 200",
              "type": "Object",
              "optional": false,
              "field": "data",
              "isArray": false,
              "description": "<p>Authentication data</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.access_token",
              "isArray": false,
              "description": "<p>JWT access token</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.refresh_token",
              "isArray": false,
              "description": "<p>Refresh token for renewing access</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.token_type",
              "isArray": false,
              "description": "<p>Token type (always &quot;Bearer&quot;)</p>"
            },
            {
              "group": "Success 200",
              "type": "Number",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.expires_in",
              "isArray": false,
              "description": "<p>Token expiration time in seconds</p>"
            },
            {
              "group": "Success 200",
              "type": "Object",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.user",
              "isArray": false,
              "description": "<p>User information</p>"
            },
            {
              "group": "Success 200",
              "type": "Number",
              "optional": false,
              "parentNode": {
                "path": "data.user",
                "parentNode": {
                  "path": "data",
                  "field": "data",
                  "type": "Object",
                  "isArray": false
                },
                "field": "data.user",
                "type": "Object",
                "isArray": false
              },
              "field": "data.user.id",
              "isArray": false,
              "description": "<p>User ID</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data.user",
                "parentNode": {
                  "path": "data",
                  "field": "data",
                  "type": "Object",
                  "isArray": false
                },
                "field": "data.user",
                "type": "Object",
                "isArray": false
              },
              "field": "data.user.email",
              "isArray": false,
              "description": "<p>User email</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data.user",
                "parentNode": {
                  "path": "data",
                  "field": "data",
                  "type": "Object",
                  "isArray": false
                },
                "field": "data.user",
                "type": "Object",
                "isArray": false
              },
              "field": "data.user.name",
              "isArray": false,
              "description": "<p>User name</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data.user",
                "parentNode": {
                  "path": "data",
                  "field": "data",
                  "type": "Object",
                  "isArray": false
                },
                "field": "data.user",
                "type": "Object",
                "isArray": false
              },
              "field": "data.user.role",
              "isArray": false,
              "description": "<p>User role</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Success Response:",
            "content": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"refresh_token\": \"def502004d8f9c...\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"user\": {\n      \"id\": 123,\n      \"email\": \"jane.doe@example.com\",\n      \"name\": \"Jane Doe\",\n      \"role\": \"user\"\n    }\n  }\n}",
            "type": "json"
          }
        ]
      },
      "examples": [
        {
          "title": "Request Example:",
          "content": "{\n  \"email\": \"jane.doe@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"remember_me\": true,\n  \"device_name\": \"iPhone 15 Pro\"\n}",
          "type": "json"
        }
      ],
      "error": {
        "examples": [
          {
            "title": "Authentication Error:",
            "content": "HTTP/1.1 401 Unauthorized\n{\n  \"success\": false,\n  \"message\": \"Invalid credentials\",\n  \"code\": \"INVALID_CREDENTIALS\"\n}",
            "type": "json"
          }
        ]
      },
      "filename": "json-schema-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/auth/login"
        }
      ]
    },
    {
      "type": "delete",
      "url": "/category",
      "title": "Delete a category",
      "version": "3.0.0",
      "name": "DeleteCategory",
      "group": "Category",
      "description": "<p>Delete a category. Sample request has been disabled here.</p>",
      "query": [
        {
          "group": "Query",
          "type": "Number",
          "optional": false,
          "field": "id",
          "isArray": false,
          "description": "<p>Category ID.</p>"
        }
      ],
      "parameter": {
        "examples": [
          {
            "title": "Some json code:",
            "content": "{\n  \"user\": \"Sample User\",\n   \"payload\": {\n     \"test\": [\n       \"code\": \"\n         public class HelloWorldTest {\n           HelloWorld hw = new HelloWorld();\n           @Test\n           public void testOkay {\n           assertEquals(\\\"HelloWorld\\\", hw.getMsg());\n         }\n      }\"\n     ]\n   }\n}",
            "type": "json"
          }
        ]
      },
      "filename": "example.js"
    },
    {
      "type": "get",
      "url": "/category",
      "title": "Get a category",
      "version": "3.0.0",
      "sampleRequest": [
        {
          "url": "http://www.example.com"
        }
      ],
      "name": "GetCategory",
      "group": "Category",
      "description": "<p>Get a category. Sample request on example.com here.</p>",
      "query": [
        {
          "group": "Query",
          "type": "Number",
          "optional": false,
          "field": "id",
          "isArray": false,
          "description": "<p>Category ID.</p>"
        }
      ],
      "body": [
        {
          "group": "Body",
          "type": "String",
          "optional": false,
          "field": "custom.id",
          "isArray": false,
          "description": "<p>Custom ID with dot.</p>"
        }
      ],
      "filename": "example.js"
    },
    {
      "type": "post",
      "url": "/city",
      "title": "Create a new city",
      "version": "3.0.0",
      "name": "CreateCity",
      "group": "City",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/city"
        }
      ],
      "description": "<p>Create a new city.</p>",
      "body": [
        {
          "group": "Body",
          "type": "String",
          "optional": false,
          "field": "name",
          "isArray": false,
          "defaultValue": "Paris",
          "description": "<p>Name of the city</p>"
        }
      ],
      "query": [
        {
          "group": "Query",
          "type": "String",
          "allowedValues": [
            "Aerial",
            "Land",
            "Underwater"
          ],
          "optional": false,
          "field": "view",
          "isArray": false,
          "defaultValue": "Aerial",
          "description": "<p>Type of view.</p>"
        },
        {
          "group": "Query",
          "type": "Number",
          "optional": false,
          "field": "zoom",
          "isArray": false,
          "description": "<p>Zoom.</p>"
        }
      ],
      "filename": "example.js"
    },
    {
      "type": "post",
      "url": "/api/company/soft-updates",
      "title": "Create Soft Update",
      "name": "CreateSoftUpdate",
      "group": "Company",
      "version": "4.0.0",
      "description": "<p>Creates a new soft configuration update. Demonstrates nested interface handling.</p>",
      "parameter": {
        "fields": {
          "Body": [
            {
              "group": "Body",
              "type": "String",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>Id</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "allowedValues": [
                "' | '",
                "' | '"
              ],
              "optional": false,
              "field": "type",
              "isArray": false,
              "description": "<p>Type</p>"
            },
            {
              "group": "Body",
              "type": "Mixed",
              "optional": false,
              "field": "value",
              "isArray": false,
              "description": "<p>Value</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "field": "effective_from",
              "isArray": false,
              "description": "<p>Effective_from</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "field": "expires_at",
              "isArray": false,
              "description": "<p>Expires_at</p>"
            }
          ]
        }
      },
      "examples": [
        {
          "title": "Request Example:",
          "content": "{\n  \"id\": \"pricing-update-001\",\n  \"type\": \"pricing\",\n  \"value\": {\n    \"base_rate\": 2.50,\n    \"per_km\": 0.75\n  },\n  \"effective_from\": \"2024-02-01T00:00:00Z\",\n  \"expires_at\": \"2024-03-01T00:00:00Z\"\n}",
          "type": "json"
        }
      ],
      "filename": "schema-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/company/soft-updates"
        }
      ]
    },
    {
      "type": "post",
      "url": "/api/company/pricing",
      "title": "Update Company Pricing",
      "name": "UpdateCompanyPricing",
      "group": "Company",
      "version": "4.0.0",
      "description": "<p>Updates the pricing configuration for a company. This endpoint demonstrates TypeScript interface integration with apiSchema.</p>",
      "parameter": {
        "fields": {
          "Body": [
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "field": "default_plan_type",
              "isArray": false,
              "description": "<p>Default_plan_type</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "field": "default_billing_currency",
              "isArray": false,
              "description": "<p>Default_billing_currency</p>"
            },
            {
              "group": "Body",
              "type": "Object",
              "optional": true,
              "field": "default_surge",
              "isArray": false,
              "description": "<p>Default_surge</p>"
            },
            {
              "group": "Body",
              "type": "Boolean",
              "optional": false,
              "field": "active",
              "isArray": false,
              "description": "<p>Active</p>"
            },
            {
              "group": "Body",
              "type": "Number",
              "optional": false,
              "field": "multiplier",
              "isArray": false,
              "description": "<p>Multiplier</p>"
            },
            {
              "group": "Body",
              "type": "Number",
              "optional": false,
              "field": "fixed_extra",
              "isArray": false,
              "description": "<p>Fixed_extra</p>"
            },
            {
              "group": "Body",
              "type": "Array",
              "optional": true,
              "field": "services_types",
              "isArray": false,
              "description": "<p>Services_types</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": false,
              "field": "type",
              "isArray": false,
              "description": "<p>Type</p>"
            },
            {
              "group": "Body",
              "type": "Number",
              "optional": true,
              "field": "value",
              "isArray": false,
              "description": "<p>Value</p>"
            },
            {
              "group": "Body",
              "type": "Number",
              "optional": true,
              "field": "value_driver",
              "isArray": false,
              "description": "<p>Value_driver</p>"
            },
            {
              "group": "Body",
              "type": "Number",
              "optional": true,
              "field": "value_km",
              "isArray": false,
              "description": "<p>Value_km</p>"
            },
            {
              "group": "Body",
              "type": "Number",
              "optional": true,
              "field": "km",
              "isArray": false,
              "description": "<p>Km</p>"
            },
            {
              "group": "Body",
              "type": "Boolean",
              "optional": true,
              "field": "high_demand_active",
              "isArray": false,
              "description": "<p>High_demand_active</p>"
            },
            {
              "group": "Body",
              "type": "Number",
              "optional": true,
              "field": "high_demand",
              "isArray": false,
              "description": "<p>High_demand</p>"
            },
            {
              "group": "Body",
              "type": "CompanySoftUpdate[]",
              "optional": true,
              "field": "soft_updates",
              "isArray": true,
              "description": "<p>Soft_updates</p>"
            },
            {
              "group": "Body",
              "type": "CompanyHardOverwrite[]",
              "optional": true,
              "field": "hard_overwrites",
              "isArray": true,
              "description": "<p>Hard_overwrites</p>"
            }
          ]
        }
      },
      "success": {
        "examples": [
          {
            "title": "Success Response:",
            "content": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 123,\n    \"message\": \"Pricing updated successfully\"\n  }\n}",
            "type": "json"
          }
        ]
      },
      "error": {
        "examples": [
          {
            "title": "Validation Error:",
            "content": "HTTP/1.1 400 Bad Request\n{\n  \"success\": false,\n  \"message\": \"Validation failed\",\n  \"code\": \"VALIDATION_ERROR\",\n  \"details\": {\n    \"field_errors\": {\n      \"default_billing_currency\": [\"Invalid currency code\"]\n    }\n  }\n}",
            "type": "json"
          }
        ]
      },
      "filename": "schema-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/company/pricing"
        }
      ]
    },
    {
      "type": "post",
      "url": "/api/responses/generic",
      "title": "Example with Generic Interface",
      "name": "CreateGenericResponse",
      "group": "Examples",
      "version": "4.0.0",
      "description": "<p>This example shows how complex interfaces with generics and index signatures are automatically simplified.</p>",
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "true",
              "optional": false,
              "field": "success",
              "isArray": false,
              "description": "<p>Success</p>"
            },
            {
              "group": "Success 200",
              "type": "Mixed",
              "optional": false,
              "field": "data",
              "isArray": false,
              "description": "<p>Data</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Success Response:",
            "content": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": \"any type of data\"\n}",
            "type": "json"
          }
        ]
      },
      "filename": "schema-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/responses/generic"
        }
      ]
    },
    {
      "type": "put",
      "url": "/api/responses/complex",
      "title": "Complex Interface Example",
      "name": "UpdateComplexResponse",
      "group": "Examples",
      "version": "4.0.0",
      "description": "<p>Demonstrates resilient parsing of interfaces with:</p> <ul> <li>Generic type parameters (T, K, V) -&gt; converted to Mixed</li> <li>Index signatures [key: string]: unknown -&gt; ignored</li> <li>Complex nested structures -&gt; properly handled</li> </ul>",
      "examples": [
        {
          "title": "Request Example:",
          "content": "{\n  \"id\": \"error-001\",\n  \"code\": 400\n}",
          "type": "json"
        }
      ],
      "filename": "schema-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/responses/complex"
        }
      ]
    },
    {
      "type": "get",
      "url": "/api/inline-example",
      "title": "Inline OpenAPI example",
      "name": "getApiInline-example",
      "description": "This is defined directly in the comment",
      "version": "1.0.0",
      "openapi": {
        "paths": {
          "/api/inline-example": {
            "get": {
              "summary": "Inline OpenAPI example",
              "description": "This is defined directly in the comment",
              "tags": [
                "Examples"
              ],
              "x-version": "1.0.0",
              "responses": {
                "200": {
                  "description": "Success response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "This is an inline example"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success",
              "type": "String",
              "optional": true,
              "field": "message",
              "description": "",
              "defaultValue": "This is an inline example"
            }
          ]
        }
      },
      "group": "Examples",
      "filename": "openapi-external-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/inline-example"
        }
      ]
    },
    {
      "type": "post",
      "url": "/api/files/upload",
      "title": "Upload File",
      "name": "UploadFile",
      "group": "Files",
      "version": "4.0.0",
      "description": "<p>Uploads a file to the server. Demonstrates mixed schema and manual documentation for multipart requests.</p>",
      "parameter": {
        "fields": {
          "Form Data": [
            {
              "group": "Form Data",
              "type": "File",
              "optional": false,
              "field": "file",
              "isArray": false,
              "description": "<p>The file to upload</p>"
            },
            {
              "group": "Form Data",
              "type": "String",
              "optional": true,
              "field": "description",
              "isArray": false,
              "description": "<p>File description</p>"
            },
            {
              "group": "Form Data",
              "type": "String",
              "allowedValues": [
                "\"public\"",
                "\"private\""
              ],
              "optional": true,
              "field": "visibility",
              "isArray": false,
              "defaultValue": "private",
              "description": "<p>File visibility</p>"
            },
            {
              "group": "Form Data",
              "type": "String[]",
              "optional": true,
              "field": "tags",
              "isArray": true,
              "description": "<p>Array of tags for the file</p>"
            }
          ]
        }
      },
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "Boolean",
              "optional": false,
              "field": "success",
              "isArray": false,
              "description": "<p>Always true for successful upload</p>"
            },
            {
              "group": "Success 200",
              "type": "Object",
              "optional": false,
              "field": "data",
              "isArray": false,
              "description": "<p>Upload result data</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.file_id",
              "isArray": false,
              "description": "<p>Unique file identifier</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.filename",
              "isArray": false,
              "description": "<p>Original filename</p>"
            },
            {
              "group": "Success 200",
              "type": "Number",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.size",
              "isArray": false,
              "description": "<p>File size in bytes</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.mime_type",
              "isArray": false,
              "description": "<p>File MIME type</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.url",
              "isArray": false,
              "description": "<p>File access URL</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.uploaded_at",
              "isArray": false,
              "description": "<p>Upload timestamp</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Success Response:",
            "content": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"file_id\": \"f7c8b3e2-4d5a-4f9c-8b2e-1a3d7c9e4f5b\",\n    \"filename\": \"document.pdf\",\n    \"size\": 1024768,\n    \"mime_type\": \"application/pdf\",\n    \"url\": \"https://api.example.com/files/f7c8b3e2-4d5a-4f9c-8b2e-1a3d7c9e4f5b\",\n    \"uploaded_at\": \"2024-01-20T15:30:00Z\"\n  }\n}",
            "type": "json"
          }
        ]
      },
      "filename": "json-schema-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/files/upload"
        }
      ]
    },
    {
      "type": "post",
      "url": "/api/users/:id/avatar",
      "title": "Upload user avatar",
      "name": "uploadAvatar",
      "description": "Uploads a new avatar image for the user",
      "version": "3.0.0",
      "openapi": {
        "paths": {
          "/api/users/{id}/avatar": {
            "post": {
              "summary": "Upload user avatar",
              "description": "Uploads a new avatar image for the user",
              "operationId": "uploadAvatar",
              "x-version": "3.0.0",
              "x-group": "Files_Management",
              "tags": [
                "Users",
                "Files"
              ],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "multipart/form-data": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "file"
                      ],
                      "properties": {
                        "file": {
                          "type": "string",
                          "format": "binary",
                          "description": "Avatar image file"
                        },
                        "description": {
                          "type": "string",
                          "maxLength": 255,
                          "description": "Optional description for the avatar"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Avatar uploaded successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "avatar_url": {
                            "type": "string",
                            "format": "uri",
                            "example": "https://api.example.com/avatars/12345.jpg"
                          }
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid file"
                },
                "413": {
                  "description": "File too large"
                }
              }
            }
          }
        }
      },
      "parameter": [
        {
          "group": "Parameter",
          "type": "Number",
          "optional": false,
          "field": "id",
          "description": ""
        }
      ],
      "body": [
        {
          "group": "Success",
          "type": "File",
          "optional": false,
          "field": "file",
          "description": "Avatar image file"
        },
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "description",
          "description": "Optional description for the avatar"
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success",
              "type": "String",
              "optional": true,
              "field": "avatar_url",
              "description": "",
              "defaultValue": "https://api.example.com/avatars/12345.jpg"
            }
          ]
        }
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error",
              "type": "Object",
              "field": "400",
              "description": "Invalid file",
              "optional": false
            },
            {
              "group": "Error",
              "type": "Object",
              "field": "413",
              "description": "File too large",
              "optional": false
            }
          ]
        }
      },
      "group": "Files_Management",
      "filename": "openapi-native-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/users/:id/avatar"
        }
      ]
    },
    {
      "type": "publish",
      "url": "v1/{tenant}/devices/{deviceId}/commands/ack",
      "title": "",
      "name": "PublishCommandAck",
      "group": "Mqtt",
      "topic": "v1/{tenant}/devices/{deviceId}/commands/ack",
      "topicParameter": {
        "fields": {
          "": [
            {
              "group": "",
              "type": "String",
              "name": "Tenant identifier",
              "description": ""
            },
            {
              "group": "",
              "type": "String",
              "name": "Device sending acknowledgment",
              "description": ""
            }
          ]
        }
      },
      "qos": 1,
      "retain": false,
      "version": "0.0.0",
      "filename": "mqtt-examples.ts",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.comv1/{tenant}/devices/{deviceId}/commands/ack"
        }
      ]
    },
    {
      "type": "publish",
      "url": "v1/{tenant}/devices/{deviceId}/status",
      "title": "",
      "name": "PublishDeviceStatus",
      "group": "Mqtt",
      "topic": "v1/{tenant}/devices/{deviceId}/status",
      "topicParameter": {
        "fields": {
          "": [
            {
              "group": "",
              "type": "String",
              "name": "Tenant identifier",
              "description": ""
            },
            {
              "group": "",
              "type": "String",
              "name": "Device reporting status",
              "description": ""
            }
          ]
        }
      },
      "qos": 1,
      "retain": true,
      "version": "0.0.0",
      "filename": "mqtt-examples.ts",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.comv1/{tenant}/devices/{deviceId}/status"
        }
      ]
    },
    {
      "type": "inline",
      "url": "v1/{tenant}/devices/{deviceId}/telemetry",
      "title": "",
      "name": "PublishTelemetry",
      "group": "Mqtt",
      "topic": "v1/{tenant}/devices/{deviceId}/telemetry",
      "topicParameter": {
        "fields": {
          "": [
            {
              "group": "",
              "type": "String",
              "name": "Tenant identifier (slug format, e.g., \"acme\")",
              "description": ""
            },
            {
              "group": "",
              "type": "String",
              "name": "Unique device identifier",
              "description": ""
            }
          ]
        }
      },
      "qos": 1,
      "retain": false,
      "details": "Device credentials with TLS recommended",
      "mimeType": "application/json",
      "description": "Maximum telemetry frequency per device",
      "schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "required": [
          "ts",
          "metrics"
        ],
        "properties": {
          "ts": {
            "type": "string",
            "format": "date-time"
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          }
        }
      },
      "isValid": true,
      "rate": 10,
      "unit": "second",
      "tags": [
        "telemetry",
        "sensor",
        "iot-data"
      ],
      "errors": [
        {
          "description": "Connection refused due to invalid credentials"
        }
      ],
      "examplePublish": [
        {
          "title": "mosquitto_pub Command",
          "content": "mosquitto_pub -h mqtt.example.com -p 8883 \\\n  -u \"acme:device-42\" -P \"secret123\" \\\n  -t \"v1/acme/devices/device-42/telemetry\" \\\n  -q 1 \\\n  -m '{\"ts\":\"2025-09-26T20:34:00Z\",\"metrics\":{\"temp\":22.5,\"humidity\":57,\"pressure\":1013.25}}'\n\nPublish device telemetry data to the MQTT broker. This endpoint accepts\nsensor readings and metrics from IoT devices.\n\nThe payload should contain timestamped metrics with sensor readings.\nAll numeric values should be in their standard units (Celsius for temperature,\npercentage for humidity, etc.).",
          "type": "bash"
        }
      ],
      "version": "0.0.0",
      "filename": "mqtt-examples.ts",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.comv1/{tenant}/devices/{deviceId}/telemetry"
        }
      ]
    },
    {
      "type": "subscribe",
      "url": "v1/{tenant}/devices/+/alerts",
      "title": "",
      "name": "SubscribeAlerts",
      "group": "Mqtt",
      "topic": "v1/{tenant}/devices/+/alerts",
      "topicParameter": {
        "fields": {
          "": [
            {
              "group": "",
              "type": "String",
              "name": "Tenant identifier",
              "description": ""
            }
          ]
        }
      },
      "qos": 2,
      "retain": false,
      "version": "0.0.0",
      "filename": "mqtt-examples.ts",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.comv1/{tenant}/devices/+/alerts"
        }
      ]
    },
    {
      "type": "inline",
      "url": "v1/{tenant}/devices/{deviceId}/commands",
      "title": "",
      "name": "SubscribeCommands",
      "group": "Mqtt",
      "topic": "v1/{tenant}/devices/{deviceId}/commands/ack",
      "topicParameter": {
        "fields": {
          "": [
            {
              "group": "",
              "type": "String",
              "name": "Tenant identifier",
              "description": ""
            },
            {
              "group": "",
              "type": "String",
              "name": "Device to receive commands",
              "description": ""
            }
          ]
        }
      },
      "qos": 1,
      "retain": false,
      "details": "Device credentials with TLS recommended",
      "mimeType": "application/json",
      "description": "Command rate limit per device",
      "schema": {
        "type": "object",
        "required": [
          "cmd",
          "seq"
        ],
        "properties": {
          "cmd": {
            "type": "string",
            "enum": [
              "on",
              "off",
              "set",
              "reboot"
            ]
          },
          "value": {
            "type": [
              "number",
              "string",
              "boolean",
              "null"
            ]
          },
          "seq": {
            "type": "integer"
          }
        }
      },
      "isValid": true,
      "responseExample": [
        {
          "title": "Response Example",
          "content": "{\"seq\":101,\"status\":\"ok\",\"timestamp\":\"2025-09-26T20:34:05Z\"}",
          "type": "json"
        }
      ],
      "rate": 5,
      "unit": "minute",
      "tags": [
        "commands",
        "actuator",
        "control"
      ],
      "errors": [
        {
          "description": "Topic access denied - insufficient permissions"
        }
      ],
      "exampleSubscribe": [
        {
          "title": "mosquitto_sub Command",
          "content": "mosquitto_sub -h mqtt.example.com -p 8883 \\\n  -u \"acme:device-42\" -P \"secret123\" \\\n  -t \"v1/acme/devices/device-42/commands\" \\\n  -q 1\n\nSubscribe to device commands from the server. Devices listen on this topic\nto receive control commands such as actuator changes, configuration updates,\nor operational commands.\n\nCommands include a sequence number for acknowledgment tracking and a command\ntype with optional parameters.",
          "type": "bash"
        }
      ],
      "version": "0.0.0",
      "filename": "mqtt-examples.ts",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.comv1/{tenant}/devices/{deviceId}/commands"
        }
      ]
    },
    {
      "type": "subscribe",
      "url": "v1/{tenant}/devices/{deviceId}/config",
      "title": "",
      "name": "SubscribeConfig",
      "group": "Mqtt",
      "topic": "v1/{tenant}/devices/{deviceId}/config",
      "topicParameter": {
        "fields": {
          "": [
            {
              "group": "",
              "type": "String",
              "name": "Tenant identifier",
              "description": ""
            },
            {
              "group": "",
              "type": "String",
              "name": "Device to receive configuration",
              "description": ""
            }
          ]
        }
      },
      "qos": 0,
      "retain": true,
      "version": "0.0.0",
      "filename": "mqtt-examples.ts",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.comv1/{tenant}/devices/{deviceId}/config"
        }
      ]
    },
    {
      "type": "put",
      "url": "/api/products/:id",
      "title": "Update product",
      "name": "putApiProductsId",
      "description": "Update product information",
      "version": "4.0.0",
      "openapi": {
        "paths": {
          "/api/products/{id}": {
            "put": {
              "summary": "Update product",
              "description": "Update product information",
              "tags": [
                "Products",
                "v4.0.0"
              ],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/UpdateProductRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Product updated successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid request data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Product not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameter": [
        {
          "group": "Parameter",
          "type": "String",
          "optional": false,
          "field": "id",
          "description": ""
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "id",
              "description": "Product's unique identifier"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "name",
              "description": "Product name"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": true,
              "field": "description",
              "description": "Product description"
            },
            {
              "group": "Success",
              "type": "Number",
              "optional": false,
              "field": "price",
              "description": "Product price"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "category",
              "description": "Product category"
            },
            {
              "group": "Success",
              "type": "String[]",
              "optional": true,
              "field": "tags",
              "description": "Product tags"
            },
            {
              "group": "Success",
              "type": "Boolean",
              "optional": true,
              "field": "in_stock",
              "description": "Whether product is in stock"
            },
            {
              "group": "Success",
              "type": "String[]",
              "optional": true,
              "field": "reviews",
              "description": "Product reviews (optional)"
            }
          ]
        }
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "error",
              "description": "Error code"
            },
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "message",
              "description": "Human-readable error message"
            },
            {
              "group": "Error",
              "type": "Object",
              "optional": true,
              "field": "details",
              "description": "Additional error details"
            }
          ]
        }
      },
      "group": "Products",
      "body": [
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "name",
          "description": ""
        },
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "description",
          "description": ""
        },
        {
          "group": "Success",
          "type": "Number",
          "optional": true,
          "field": "price",
          "description": ""
        },
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "category",
          "description": ""
        },
        {
          "group": "Success",
          "type": "String[]",
          "optional": true,
          "field": "tags",
          "description": ""
        },
        {
          "group": "Success",
          "type": "Boolean",
          "optional": true,
          "field": "in_stock",
          "description": ""
        }
      ],
      "filename": "openapi-external-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/products/:id"
        }
      ]
    },
    {
      "type": "put",
      "url": "/api/products/:id",
      "title": "Update product",
      "name": "putApiProductsId",
      "description": "Update product information",
      "version": "4.0.0",
      "openapi": {
        "paths": {
          "/api/products/{id}": {
            "put": {
              "summary": "Update product",
              "description": "Update product information",
              "tags": [
                "Products",
                "v4.0.0"
              ],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/UpdateProductRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Product updated successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid request data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Product not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameter": [
        {
          "group": "Parameter",
          "type": "String",
          "optional": false,
          "field": "id",
          "description": ""
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "id",
              "description": "Product's unique identifier"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "name",
              "description": "Product name"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": true,
              "field": "description",
              "description": "Product description"
            },
            {
              "group": "Success",
              "type": "Number",
              "optional": false,
              "field": "price",
              "description": "Product price"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "category",
              "description": "Product category"
            },
            {
              "group": "Success",
              "type": "String[]",
              "optional": true,
              "field": "tags",
              "description": "Product tags"
            },
            {
              "group": "Success",
              "type": "Boolean",
              "optional": true,
              "field": "in_stock",
              "description": "Whether product is in stock"
            },
            {
              "group": "Success",
              "type": "String[]",
              "optional": true,
              "field": "reviews",
              "description": "Product reviews (optional)"
            }
          ]
        }
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "error",
              "description": "Error code"
            },
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "message",
              "description": "Human-readable error message"
            },
            {
              "group": "Error",
              "type": "Object",
              "optional": true,
              "field": "details",
              "description": "Additional error details"
            }
          ]
        }
      },
      "group": "Products",
      "body": [
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "name",
          "description": ""
        },
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "description",
          "description": ""
        },
        {
          "group": "Success",
          "type": "Number",
          "optional": true,
          "field": "price",
          "description": ""
        },
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "category",
          "description": ""
        },
        {
          "group": "Success",
          "type": "String[]",
          "optional": true,
          "field": "tags",
          "description": ""
        },
        {
          "group": "Success",
          "type": "Boolean",
          "optional": true,
          "field": "in_stock",
          "description": ""
        }
      ],
      "filename": "openapi-external-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/products/:id"
        }
      ]
    },
    {
      "type": "put",
      "url": "/api/products/:id",
      "title": "Update product",
      "name": "putApiProductsId",
      "description": "Update product information",
      "version": "4.0.0",
      "openapi": {
        "paths": {
          "/api/products/{id}": {
            "put": {
              "summary": "Update product",
              "description": "Update product information",
              "tags": [
                "Products",
                "v4.0.0"
              ],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/UpdateProductRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Product updated successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid request data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Product not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameter": [
        {
          "group": "Parameter",
          "type": "String",
          "optional": false,
          "field": "id",
          "description": ""
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "id",
              "description": "Product's unique identifier"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "name",
              "description": "Product name"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": true,
              "field": "description",
              "description": "Product description"
            },
            {
              "group": "Success",
              "type": "Number",
              "optional": false,
              "field": "price",
              "description": "Product price"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "category",
              "description": "Product category"
            },
            {
              "group": "Success",
              "type": "String[]",
              "optional": true,
              "field": "tags",
              "description": "Product tags"
            },
            {
              "group": "Success",
              "type": "Boolean",
              "optional": true,
              "field": "in_stock",
              "description": "Whether product is in stock"
            },
            {
              "group": "Success",
              "type": "String[]",
              "optional": true,
              "field": "reviews",
              "description": "Product reviews (optional)"
            }
          ]
        }
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "error",
              "description": "Error code"
            },
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "message",
              "description": "Human-readable error message"
            },
            {
              "group": "Error",
              "type": "Object",
              "optional": true,
              "field": "details",
              "description": "Additional error details"
            }
          ]
        }
      },
      "group": "Products",
      "body": [
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "name",
          "description": ""
        },
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "description",
          "description": ""
        },
        {
          "group": "Success",
          "type": "Number",
          "optional": true,
          "field": "price",
          "description": ""
        },
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "category",
          "description": ""
        },
        {
          "group": "Success",
          "type": "String[]",
          "optional": true,
          "field": "tags",
          "description": ""
        },
        {
          "group": "Success",
          "type": "Boolean",
          "optional": true,
          "field": "in_stock",
          "description": ""
        }
      ],
      "filename": "openapi-external-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/products/:id"
        }
      ]
    },
    {
      "type": "openapi-schema",
      "name": "Error",
      "title": "Schema: Error",
      "group": "Schemas",
      "description": "OpenAPI schema definition for Error (Type: object)",
      "version": "4.0.0",
      "openapi": {
        "components": {
          "schemas": {
            "Error": {
              "type": "object",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 404,
                  "description": "HTTP error code"
                },
                "message": {
                  "type": "string",
                  "example": "Resource not found",
                  "description": "Human readable error message"
                },
                "details": {
                  "type": "string",
                  "example": "User with ID 123 does not exist",
                  "description": "Additional error details"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-15T10:30:00Z",
                  "description": "When the error occurred"
                }
              }
            }
          }
        }
      },
      "url": "",
      "filename": "openapi-native-examples.js"
    },
    {
      "type": "openapi-schema",
      "name": "User",
      "title": "Schema: User",
      "group": "Schemas",
      "description": "OpenAPI schema definition for User (Type: object)",
      "version": "4.0.0",
      "openapi": {
        "components": {
          "schemas": {
            "User": {
              "type": "object",
              "required": [
                "id",
                "name",
                "email"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 12345,
                  "description": "Unique user identifier"
                },
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100,
                  "example": "John Doe",
                  "description": "Full name of the user"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "example": "john@example.com",
                  "description": "User's email address"
                },
                "age": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 150,
                  "example": 30,
                  "description": "User's age in years"
                },
                "active": {
                  "type": "boolean",
                  "default": true,
                  "description": "Whether the user account is active"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-15T10:30:00Z",
                  "readOnly": true
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "developer",
                    "premium"
                  ],
                  "description": "User tags for categorization"
                }
              }
            }
          }
        }
      },
      "url": "",
      "filename": "openapi-native-examples.js"
    },
    {
      "type": "openapi-schema",
      "url": "/api/users",
      "title": "Schema: UserListResponse",
      "name": "UserListResponse",
      "group": "Schemas",
      "version": "4.0.0",
      "description": "OpenAPI schema definition for UserListResponse (Type: object)",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "Number",
              "optional": true,
              "field": "page",
              "isArray": false,
              "defaultValue": "1",
              "description": "<p>Page number for pagination</p>"
            },
            {
              "group": "Parameter",
              "type": "Number",
              "optional": true,
              "field": "limit",
              "isArray": false,
              "defaultValue": "10",
              "description": "<p>Number of users per page</p>"
            },
            {
              "group": "Parameter",
              "type": "String",
              "optional": true,
              "field": "sort",
              "isArray": false,
              "defaultValue": "name",
              "description": "<p>Field to sort by</p>"
            },
            {
              "group": "Parameter",
              "type": "String",
              "allowedValues": [
                "\"asc\"",
                "\"desc\""
              ],
              "optional": true,
              "field": "order",
              "isArray": false,
              "defaultValue": "asc",
              "description": "<p>Sort order</p>"
            }
          ]
        }
      },
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "Object[]",
              "optional": false,
              "field": "users",
              "isArray": true,
              "description": "<p>List of users</p>"
            },
            {
              "group": "Success 200",
              "type": "Number",
              "optional": false,
              "field": "total",
              "isArray": false,
              "description": "<p>Total number of users</p>"
            },
            {
              "group": "Success 200",
              "type": "Number",
              "optional": false,
              "field": "page",
              "isArray": false,
              "description": "<p>Current page number</p>"
            },
            {
              "group": "Success 200",
              "type": "Number",
              "optional": false,
              "field": "pages",
              "isArray": false,
              "description": "<p>Total number of pages</p>"
            }
          ]
        }
      },
      "openapi": {
        "components": {
          "schemas": {
            "UserListResponse": {
              "type": "object",
              "properties": {
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                },
                "total": {
                  "type": "integer",
                  "example": 150
                },
                "page": {
                  "type": "integer",
                  "example": 1
                },
                "pages": {
                  "type": "integer",
                  "example": 15
                }
              }
            }
          }
        }
      },
      "filename": "openapi-native-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/users"
        }
      ]
    },
    {
      "type": "get",
      "url": "/api/health",
      "title": "Health Check",
      "name": "HealthCheck",
      "group": "System",
      "version": "4.0.0",
      "description": "<p>Simple health check endpoint. Demonstrates minimal schema usage.</p>",
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "Boolean",
              "optional": false,
              "field": "success",
              "isArray": false,
              "description": "<p>Always true for successful response</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "message",
              "isArray": false,
              "description": "<p>Health status message</p>"
            },
            {
              "group": "Success 200",
              "type": "Object",
              "optional": false,
              "field": "data",
              "isArray": false,
              "description": "<p>Health check data</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.status",
              "isArray": false,
              "description": "<p>Service status</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.timestamp",
              "isArray": false,
              "description": "<p>Current server timestamp</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "data",
                "field": "data",
                "type": "Object",
                "isArray": false
              },
              "field": "data.version",
              "isArray": false,
              "description": "<p>API version</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Success Response:",
            "content": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"message\": \"Service is healthy\",\n  \"data\": {\n    \"status\": \"ok\",\n    \"timestamp\": \"2024-01-20T15:30:00Z\",\n    \"version\": \"4.0.0\"\n  }\n}",
            "type": "json"
          }
        ]
      },
      "filename": "schema-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/health"
        }
      ]
    },
    {
      "type": "openapi-operation",
      "name": "updateUser",
      "title": "Update user",
      "description": "Updates an existing user's information",
      "version": "3.0.0",
      "openapi": {
        "summary": "Update user",
        "description": "Updates an existing user's information",
        "operationId": "updateUser",
        "x-version": "3.0.0",
        "x-group": "User_Management",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID to update",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "age": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 150
                  },
                  "active": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "group": "User_Management",
      "url": "",
      "filename": "openapi-native-examples.js"
    },
    {
      "type": "post",
      "url": "/api/users",
      "title": "Create User Account",
      "name": "CreateUser",
      "group": "Users",
      "version": "4.0.0",
      "description": "<p>Creates a new user account with the provided information. This endpoint demonstrates JSON Schema integration for request validation.</p>",
      "parameter": {
        "fields": {
          "Body": [
            {
              "group": "Body",
              "type": "String",
              "optional": false,
              "field": "email",
              "isArray": false,
              "description": "<p>User's email address (must be unique) - UPDATED VERSION2</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": false,
              "field": "name",
              "isArray": false,
              "description": "<p>User's full name</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": false,
              "field": "password",
              "isArray": false,
              "description": "<p>User's password (8-128 characters)</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "field": "role",
              "isArray": false,
              "description": "<p>User's role in the system</p>"
            },
            {
              "group": "Body",
              "type": "Object",
              "optional": true,
              "field": "preferences",
              "isArray": false,
              "description": "<p>User preferences configuration</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "parentNode": {
                "path": "preferences",
                "field": "preferences",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.theme",
              "isArray": false,
              "description": "<p>UI theme preference</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "parentNode": {
                "path": "preferences",
                "field": "preferences",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.language",
              "isArray": false,
              "description": "<p>Language preference (ISO 639-1 code)</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "parentNode": {
                "path": "preferences",
                "field": "preferences",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.timezone",
              "isArray": false,
              "description": "<p>Timezone identifier (IANA timezone)</p>"
            },
            {
              "group": "Body",
              "type": "Object",
              "optional": true,
              "parentNode": {
                "path": "preferences",
                "field": "preferences",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.notifications",
              "isArray": false,
              "description": "<p>Notification preferences</p>"
            },
            {
              "group": "Body",
              "type": "Boolean",
              "optional": true,
              "parentNode": {
                "path": "preferences.notifications",
                "parentNode": {
                  "path": "preferences",
                  "field": "preferences",
                  "type": "Object",
                  "isArray": false
                },
                "field": "preferences.notifications",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.notifications.email",
              "isArray": false,
              "description": "<p>Receive email notifications</p>"
            },
            {
              "group": "Body",
              "type": "Boolean",
              "optional": true,
              "parentNode": {
                "path": "preferences.notifications",
                "parentNode": {
                  "path": "preferences",
                  "field": "preferences",
                  "type": "Object",
                  "isArray": false
                },
                "field": "preferences.notifications",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.notifications.push",
              "isArray": false,
              "description": "<p>Receive push notifications</p>"
            },
            {
              "group": "Body",
              "type": "Boolean",
              "optional": true,
              "parentNode": {
                "path": "preferences.notifications",
                "parentNode": {
                  "path": "preferences",
                  "field": "preferences",
                  "type": "Object",
                  "isArray": false
                },
                "field": "preferences.notifications",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.notifications.sms",
              "isArray": false,
              "description": "<p>Receive SMS notifications</p>"
            },
            {
              "group": "Body",
              "type": "Object",
              "optional": true,
              "field": "metadata",
              "isArray": false,
              "description": "<p>Additional user metadata</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "parentNode": {
                "path": "metadata",
                "field": "metadata",
                "type": "Object",
                "isArray": false
              },
              "field": "metadata.source",
              "isArray": false,
              "description": "<p>Registration source (web, mobile, api)</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "parentNode": {
                "path": "metadata",
                "field": "metadata",
                "type": "Object",
                "isArray": false
              },
              "field": "metadata.referrer",
              "isArray": false,
              "description": "<p>Referrer information</p>"
            },
            {
              "group": "Body",
              "type": "Boolean",
              "optional": true,
              "parentNode": {
                "path": "metadata",
                "field": "metadata",
                "type": "Object",
                "isArray": false
              },
              "field": "metadata.marketing_consent",
              "isArray": false,
              "description": "<p>User consents to marketing communications</p>"
            }
          ]
        }
      },
      "examples": [
        {
          "title": "Request Example:",
          "content": "{\n  \"email\": \"jane.doe@example.com\",\n  \"name\": \"Jane Doe\",\n  \"password\": \"SecurePassword123!\",\n  \"role\": \"user\",\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"language\": \"en\",\n    \"timezone\": \"America/New_York\",\n    \"notifications\": {\n      \"email\": true,\n      \"push\": true,\n      \"sms\": false\n    }\n  },\n  \"metadata\": {\n    \"source\": \"web\",\n    \"referrer\": \"google.com\",\n    \"marketing_consent\": true\n  }\n}",
          "type": "json"
        }
      ],
      "success": {
        "examples": [
          {
            "title": "Success Response:",
            "content": "HTTP/1.1 201 Created\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 123,\n    \"email\": \"jane.doe@example.com\",\n    \"name\": \"Jane Doe\",\n    \"role\": \"user\",\n    \"created_at\": \"2024-01-20T15:30:00Z\"\n  }\n}",
            "type": "json"
          }
        ]
      },
      "error": {
        "examples": [
          {
            "title": "Validation Error:",
            "content": "HTTP/1.1 400 Bad Request\n{\n  \"success\": false,\n  \"message\": \"Validation failed\",\n  \"code\": \"VALIDATION_ERROR\",\n  \"details\": {\n    \"field_errors\": {\n      \"email\": [\"Email already exists\"],\n      \"password\": [\"Password must be at least 8 characters\"]\n    }\n  }\n}",
            "type": "json"
          }
        ]
      },
      "filename": "json-schema-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/users"
        }
      ]
    },
    {
      "type": "delete",
      "url": "/user/:id",
      "title": "Delete user",
      "version": "3.0.0",
      "name": "DeleteUser",
      "group": "Users",
      "permission": [
        {
          "name": "admin"
        }
      ],
      "description": "<p>Be careful! This will remove all the data associated with that user!</p>",
      "header": {
        "fields": {
          "Header": [
            {
              "group": "Header",
              "type": "String",
              "optional": false,
              "field": "Authorization",
              "isArray": false,
              "description": "<p>The token can be generated from your user profile.</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Header-Example",
            "content": "\"Authorization: token 5f048fe\"",
            "type": "http"
          }
        ]
      },
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "Number",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p><code>id</code> of the user.</p>"
            }
          ]
        }
      },
      "examples": [
        {
          "title": "Curl example",
          "content": "curl -X DELETE -H \"Authorization: token 5f048fe\" -i https://api.example.com/user/4711",
          "type": "bash"
        },
        {
          "title": "Javascript example",
          "content": "const client = LexCorpApi('5f048fe');\nconst user = client.deleteUser(42);",
          "type": "js"
        },
        {
          "title": "Python example",
          "content": "client = LexCorpApi.Client(token=\"5f048fe\")\nuser = client.delete_user(42)",
          "type": "python"
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "result",
              "isArray": false,
              "description": "<p><code>ok</code> if everything went fine.</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": true,
              "field": "nullableField",
              "isArray": false,
              "description": "<p>This response field is not always there (can be null).</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Success-Example",
            "content": "HTTP/1.1 200 OK\n{\n    \"result\": \"ok\"\n}",
            "type": "json"
          }
        ]
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error 4xx",
              "optional": false,
              "field": "NoAccessRight",
              "isArray": false,
              "description": "<p>Only authenticated Admins can access the data.</p>"
            },
            {
              "group": "Error 4xx",
              "optional": false,
              "field": "UserNotFound",
              "isArray": false,
              "description": "<p>The <code>id</code> of the User was not found.</p>"
            }
          ],
          "500 Internal Server Error": [
            {
              "group": "500 Internal Server Error",
              "optional": false,
              "field": "InternalServerError",
              "isArray": false,
              "description": "<p>The server encountered an internal error.</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Response (example):",
            "content": "HTTP/1.1 401 Not Authenticated\n{\n  \"error\": \"NoAccessRight\"\n}",
            "type": "json"
          }
        ]
      },
      "filename": "example.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/user/:id"
        }
      ]
    },
    {
      "type": "get",
      "url": "/user/:region/:id/:opt",
      "title": "Read data of a User",
      "version": "3.0.0",
      "name": "GetUser",
      "group": "Users",
      "permission": [
        {
          "name": "admin:computer"
        }
      ],
      "description": "<p>Compare version 3.0.0 with 2.0.0 and you will see the green markers with new items in version 3.0.0 and red markers with removed items since 2.0.0.</p>",
      "header": {
        "fields": {
          "Header": [
            {
              "group": "Header",
              "type": "String",
              "optional": false,
              "field": "Authorization",
              "isArray": false,
              "description": "<p>The token can be generated from your user profile.</p>"
            },
            {
              "group": "Header",
              "type": "String",
              "optional": false,
              "field": "X-Apidoc-Cool-Factor",
              "isArray": false,
              "defaultValue": "big",
              "description": "<p>Some other header with a default value.</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Header-Example",
            "content": "\"Authorization: token 5f048fe\"",
            "type": "http"
          }
        ]
      },
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "Number",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>User unique ID</p>"
            },
            {
              "group": "Parameter",
              "type": "String",
              "optional": false,
              "field": "region",
              "isArray": false,
              "defaultValue": "fr-par",
              "description": "<p>User region</p>"
            },
            {
              "group": "Parameter",
              "type": "String",
              "optional": true,
              "field": "opt",
              "isArray": false,
              "description": "<p>An optional param</p>"
            }
          ]
        }
      },
      "examples": [
        {
          "title": "Curl example",
          "content": "curl -H \"Authorization: token 5f048fe\" -i https://api.example.com/user/fr-par/4711\ncurl -H \"Authorization: token 5f048fe\" -H \"X-Apidoc-Cool-Factor: superbig\" -i https://api.example.com/user/de-ber/1337/yep",
          "type": "bash"
        },
        {
          "title": "Javascript example",
          "content": "const client = LexCorpApi('5f048fe');\nconst user = client.getUser(42);",
          "type": "js"
        },
        {
          "title": "Python example",
          "content": "client = LexCorpApi.Client(token=\"5f048fe\")\nuser = client.get_user(42)",
          "type": "python"
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "Number",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>The Users-ID.</p>"
            },
            {
              "group": "Success 200",
              "type": "Date",
              "optional": false,
              "field": "registered",
              "isArray": false,
              "description": "<p>Registration Date.</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "name",
              "isArray": false,
              "description": "<p>Fullname of the User.</p>"
            },
            {
              "group": "Success 200",
              "type": "String[]",
              "optional": false,
              "field": "nicknames",
              "isArray": true,
              "description": "<p>List of Users nicknames (Array of Strings).</p>"
            },
            {
              "group": "Success 200",
              "type": "Object",
              "optional": false,
              "field": "profile",
              "isArray": false,
              "description": "<p>Profile data (example for an Object)</p>"
            },
            {
              "group": "Success 200",
              "type": "Number",
              "optional": true,
              "field": "opt",
              "isArray": false,
              "description": "<p>profile.age   Users age.</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "profile",
                "field": "profile",
                "type": "Object",
                "isArray": false
              },
              "field": "profile.image",
              "isArray": false,
              "description": "<p>Avatar-Image.</p>"
            },
            {
              "group": "Success 200",
              "type": "Object[]",
              "optional": false,
              "field": "options",
              "isArray": true,
              "description": "<p>List of Users options (Array of Objects).</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "options",
                "field": "options",
                "type": "Object[]",
                "isArray": true
              },
              "field": "options.name",
              "isArray": false,
              "description": "<p>Option Name.</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "parentNode": {
                "path": "options",
                "field": "options",
                "type": "Object[]",
                "isArray": true
              },
              "field": "options.value",
              "isArray": false,
              "description": "<p>Option Value.</p>"
            }
          ]
        }
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error 4xx",
              "optional": false,
              "field": "NoAccessRight",
              "isArray": false,
              "description": "<p>Only authenticated Admins can access the data.</p>"
            },
            {
              "group": "Error 4xx",
              "optional": false,
              "field": "UserNotFound",
              "isArray": false,
              "description": "<p>The <code>id</code> of the User was not found.</p>"
            }
          ],
          "500 Internal Server Error": [
            {
              "group": "500 Internal Server Error",
              "optional": false,
              "field": "InternalServerError",
              "isArray": false,
              "description": "<p>The server encountered an internal error</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Response (example):",
            "content": "HTTP/1.1 401 Not Authenticated\n{\n  \"error\": \"NoAccessRight\"\n}",
            "type": "json"
          }
        ]
      },
      "filename": "example.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/user/:region/:id/:opt"
        }
      ]
    },
    {
      "type": "get",
      "url": "/user/:id",
      "title": "Read data of a User",
      "version": "2.0.0",
      "name": "GetUser",
      "group": "Users",
      "permission": [
        {
          "name": "admin"
        }
      ],
      "description": "<p>Here you can describe the function. Multilines are possible.</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "String",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>The Users-ID.</p>"
            }
          ]
        }
      },
      "examples": [
        {
          "title": "Curl example",
          "content": "curl -i https://api.example.com/user/4711",
          "type": "bash"
        },
        {
          "title": "Javascript example",
          "content": "const client = LexCorpApi();\nconst user = client.getUser(42);",
          "type": "js"
        },
        {
          "title": "Python example",
          "content": "client = LexCorpApi.Client()\nuser = client.get_user(42)",
          "type": "python"
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>The Users-ID.</p>"
            },
            {
              "group": "Success 200",
              "type": "Date",
              "optional": false,
              "field": "name",
              "isArray": false,
              "description": "<p>Fullname of the User.</p>"
            }
          ]
        }
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error 4xx",
              "optional": false,
              "field": "UserNotFound",
              "isArray": false,
              "description": "<p>The <code>id</code> of the User was not found.</p>"
            }
          ]
        }
      },
      "filename": "_apidoc.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/user/:id"
        }
      ]
    },
    {
      "type": "get",
      "url": "/user/:id",
      "title": "Read data of a User",
      "version": "1.0.0",
      "name": "GetUser",
      "group": "Users",
      "permission": [
        {
          "name": "admin"
        }
      ],
      "description": "<p>Here you can describe the function. Multilines are possible.</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "String",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>The Users-ID.</p>"
            }
          ]
        }
      },
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>The Users-ID.</p>"
            },
            {
              "group": "Success 200",
              "type": "Date",
              "optional": false,
              "field": "name",
              "isArray": false,
              "description": "<p>Fullname of the User.</p>"
            }
          ]
        }
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error 4xx",
              "optional": false,
              "field": "UserNotFound",
              "isArray": false,
              "description": "<p>The error description text in version 1.0.0.</p>"
            }
          ]
        }
      },
      "filename": "_apidoc.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/user/:id"
        }
      ]
    },
    {
      "type": "get",
      "url": "/api/users/:id",
      "title": "Get User Profile",
      "name": "GetUserProfile",
      "group": "Users",
      "version": "4.0.0",
      "description": "<p>Retrieves detailed profile information for a specific user.</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "Number",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>User's unique identifier</p>"
            }
          ]
        }
      },
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "Number",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>Id</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "email",
              "isArray": false,
              "description": "<p>Email</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "name",
              "isArray": false,
              "description": "<p>Name</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "allowedValues": [
                "' | '",
                "' | '"
              ],
              "optional": false,
              "field": "role",
              "isArray": false,
              "description": "<p>Role</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "created_at",
              "isArray": false,
              "description": "<p>Created_at</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "updated_at",
              "isArray": false,
              "description": "<p>Updated_at</p>"
            },
            {
              "group": "Success 200",
              "type": "Object",
              "optional": true,
              "field": "preferences",
              "isArray": false,
              "description": "<p>Preferences</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "allowedValues": [
                "' | '",
                "' | '"
              ],
              "optional": false,
              "field": "theme",
              "isArray": false,
              "description": "<p>Theme</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "language",
              "isArray": false,
              "description": "<p>Language</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "timezone",
              "isArray": false,
              "description": "<p>Timezone</p>"
            },
            {
              "group": "Success 200",
              "type": "Object",
              "optional": false,
              "field": "notifications",
              "isArray": false,
              "description": "<p>Notifications</p>"
            },
            {
              "group": "Success 200",
              "type": "Boolean",
              "optional": false,
              "field": "push",
              "isArray": false,
              "description": "<p>Push</p>"
            },
            {
              "group": "Success 200",
              "type": "Boolean",
              "optional": false,
              "field": "sms",
              "isArray": false,
              "description": "<p>Sms</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Success Response:",
            "content": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"email\": \"john@example.com\",\n    \"name\": \"John Doe\",\n    \"role\": \"user\",\n    \"created_at\": \"2024-01-15T10:30:00Z\",\n    \"updated_at\": \"2024-01-20T14:45:00Z\",\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"language\": \"en\",\n      \"timezone\": \"UTC\",\n      \"notifications\": {\n        \"email\": true,\n        \"push\": true,\n        \"sms\": false\n      }\n    }\n  }\n}",
            "type": "json"
          }
        ]
      },
      "filename": "schema-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/users/:id"
        }
      ]
    },
    {
      "type": "get",
      "url": "/api/users",
      "title": "Get Users List",
      "name": "GetUsers",
      "group": "Users",
      "version": "4.0.0",
      "description": "<p>Retrieves a paginated list of users. Demonstrates complex generic interface usage with pagination.</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "Number",
              "size": "1..100",
              "optional": true,
              "field": "limit",
              "isArray": false,
              "defaultValue": "10",
              "description": "<p>Number of users per page</p>"
            },
            {
              "group": "Parameter",
              "type": "Number",
              "size": "1..",
              "optional": true,
              "field": "page",
              "isArray": false,
              "defaultValue": "1",
              "description": "<p>Page number</p>"
            },
            {
              "group": "Parameter",
              "type": "String",
              "allowedValues": [
                "\"name\"",
                "\"email\"",
                "\"created_at\""
              ],
              "optional": true,
              "field": "sort_by",
              "isArray": false,
              "defaultValue": "created_at",
              "description": "<p>Sort field</p>"
            },
            {
              "group": "Parameter",
              "type": "String",
              "allowedValues": [
                "\"asc\"",
                "\"desc\""
              ],
              "optional": true,
              "field": "sort_order",
              "isArray": false,
              "defaultValue": "desc",
              "description": "<p>Sort direction</p>"
            },
            {
              "group": "Parameter",
              "type": "String",
              "optional": true,
              "field": "search",
              "isArray": false,
              "description": "<p>Search query for name or email</p>"
            }
          ]
        }
      },
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "Boolean",
              "optional": false,
              "field": "success",
              "isArray": false,
              "description": "<p>Success</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": true,
              "field": "message",
              "isArray": false,
              "description": "<p>Message</p>"
            },
            {
              "group": "Success 200",
              "type": "Mixed[]",
              "optional": false,
              "field": "data",
              "isArray": true,
              "description": "<p>Data</p>"
            },
            {
              "group": "Success 200",
              "type": "PaginationMeta",
              "optional": false,
              "field": "meta",
              "isArray": false,
              "description": "<p>Meta</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Success Response:",
            "content": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"email\": \"john@example.com\",\n      \"name\": \"John Doe\",\n      \"role\": \"user\",\n      \"created_at\": \"2024-01-15T10:30:00Z\",\n      \"updated_at\": \"2024-01-20T14:45:00Z\"\n    }\n  ],\n  \"meta\": {\n    \"current_page\": 1,\n    \"per_page\": 10,\n    \"total\": 25,\n    \"total_pages\": 3,\n    \"has_next\": true,\n    \"has_prev\": false\n  }\n}",
            "type": "json"
          }
        ]
      },
      "filename": "schema-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/users"
        }
      ]
    },
    {
      "type": "post",
      "url": "/user",
      "title": "Create a new User",
      "version": "3.0.0",
      "name": "PostUser",
      "group": "Users",
      "permission": [
        {
          "name": "none"
        }
      ],
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/user"
        }
      ],
      "description": "<p>In this case &quot;apiErrorStructure&quot; is defined and used. Define blocks with params that will be used in several functions, so you don't have to rewrite them.</p>",
      "body": [
        {
          "group": "Body",
          "type": "Number",
          "optional": false,
          "field": "age",
          "isArray": false,
          "description": "<p>Age of the User</p>"
        },
        {
          "group": "Body",
          "type": "String",
          "optional": false,
          "field": "name",
          "isArray": false,
          "description": "<p>name=Caroline Name of the User</p>"
        },
        {
          "group": "Body",
          "type": "Object",
          "optional": false,
          "field": "extraInfo",
          "isArray": false,
          "description": "<p>Date when user was hired</p>"
        },
        {
          "group": "Body",
          "type": "Date",
          "optional": false,
          "parentNode": {
            "path": "extraInfo",
            "field": "extraInfo",
            "type": "Object",
            "isArray": false
          },
          "field": "extraInfo.hireDate",
          "isArray": false,
          "description": "<p>Date when user was hired</p>"
        },
        {
          "group": "Body",
          "type": "Date",
          "optional": true,
          "parentNode": {
            "path": "extraInfo",
            "field": "extraInfo",
            "type": "Object",
            "isArray": false
          },
          "field": "extraInfo.hireDateWithDefault",
          "isArray": false,
          "description": "<p>Date when user was hired with default</p>"
        },
        {
          "group": "Body",
          "type": "String[]",
          "optional": false,
          "parentNode": {
            "path": "extraInfo",
            "field": "extraInfo",
            "type": "Object",
            "isArray": false
          },
          "field": "extraInfo.nicknames",
          "isArray": true,
          "description": "<p>List of Users nicknames (Array of Strings)</p>"
        },
        {
          "group": "Body",
          "type": "Boolean",
          "optional": false,
          "parentNode": {
            "path": "extraInfo",
            "field": "extraInfo",
            "type": "Object",
            "isArray": false
          },
          "field": "extraInfo.isVegan",
          "isArray": false,
          "defaultValue": "true",
          "description": "<p>Is the user vegan? (boolean with default)</p>",
          "checked": true
        },
        {
          "group": "Body",
          "type": "Object",
          "optional": false,
          "parentNode": {
            "path": "extraInfo",
            "field": "extraInfo",
            "type": "Object",
            "isArray": false
          },
          "field": "extraInfo.secrets",
          "isArray": false,
          "description": "<p>Secret object</p>"
        },
        {
          "group": "Body",
          "type": "String",
          "optional": false,
          "parentNode": {
            "path": "extraInfo.secrets",
            "parentNode": {
              "path": "extraInfo",
              "field": "extraInfo",
              "type": "Object",
              "isArray": false
            },
            "field": "extraInfo.secrets",
            "type": "Object",
            "isArray": false
          },
          "field": "extraInfo.secrets.crush",
          "isArray": false,
          "description": "<p>The user secret crush</p>"
        },
        {
          "group": "Body",
          "type": "Number",
          "optional": false,
          "parentNode": {
            "path": "extraInfo.secrets",
            "parentNode": {
              "path": "extraInfo",
              "field": "extraInfo",
              "type": "Object",
              "isArray": false
            },
            "field": "extraInfo.secrets",
            "type": "Object",
            "isArray": false
          },
          "field": "extraInfo.secrets.hair",
          "isArray": false,
          "defaultValue": "1000",
          "description": "<p>Number of hair of user</p>"
        },
        {
          "group": "Body",
          "type": "Object[]",
          "optional": false,
          "parentNode": {
            "path": "extraInfo.secrets",
            "parentNode": {
              "path": "extraInfo",
              "field": "extraInfo",
              "type": "Object",
              "isArray": false
            },
            "field": "extraInfo.secrets",
            "type": "Object",
            "isArray": false
          },
          "field": "extraInfo.secrets.deepSecrets",
          "isArray": true,
          "description": "<p>Deep user secrets crush (array of objects)</p>"
        },
        {
          "group": "Body",
          "type": "String",
          "optional": false,
          "parentNode": {
            "path": "extraInfo.secrets.deepSecrets",
            "parentNode": {
              "path": "extraInfo.secrets",
              "parentNode": {
                "path": "extraInfo",
                "field": "extraInfo",
                "type": "Object",
                "isArray": false
              },
              "field": "extraInfo.secrets",
              "type": "Object",
              "isArray": false
            },
            "field": "extraInfo.secrets.deepSecrets",
            "type": "Object[]",
            "isArray": true
          },
          "field": "extraInfo.secrets.deepSecrets.key",
          "isArray": false,
          "description": "<p>A deep user secret key</p>"
        },
        {
          "group": "Body",
          "type": "Number",
          "optional": false,
          "parentNode": {
            "path": "extraInfo.secrets.deepSecrets",
            "parentNode": {
              "path": "extraInfo.secrets",
              "parentNode": {
                "path": "extraInfo",
                "field": "extraInfo",
                "type": "Object",
                "isArray": false
              },
              "field": "extraInfo.secrets",
              "type": "Object",
              "isArray": false
            },
            "field": "extraInfo.secrets.deepSecrets",
            "type": "Object[]",
            "isArray": true
          },
          "field": "extraInfo.secrets.deepSecrets.number",
          "isArray": false,
          "description": "<p>A deep user secret key</p>"
        },
        {
          "group": "Body",
          "type": "String",
          "optional": false,
          "parentNode": {
            "path": "extraInfo.secrets.deepSecrets",
            "parentNode": {
              "path": "extraInfo.secrets",
              "parentNode": {
                "path": "extraInfo",
                "field": "extraInfo",
                "type": "Object",
                "isArray": false
              },
              "field": "extraInfo.secrets",
              "type": "Object",
              "isArray": false
            },
            "field": "extraInfo.secrets.deepSecrets",
            "type": "Object[]",
            "isArray": true
          },
          "field": "extraInfo.secrets.deepSecrets.name.particle",
          "isArray": false,
          "description": "<p>A deep user secret name particle with dot</p>"
        },
        {
          "group": "Body",
          "type": "Boolean",
          "optional": false,
          "parentNode": {
            "path": "extraInfo",
            "field": "extraInfo",
            "type": "Object",
            "isArray": false
          },
          "field": "extraInfo.isAlive",
          "isArray": false,
          "description": "<p>Is the user alive? (boolean with no default)</p>",
          "checked": false
        },
        {
          "group": "Body",
          "type": "String",
          "optional": false,
          "field": "custom.property",
          "isArray": false,
          "description": "<p>Custom property with dot</p>"
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "Number",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>The new Users-ID.</p>"
            }
          ]
        }
      },
      "use": [
        {
          "name": "CreateUserError"
        }
      ],
      "filename": "example.js"
    },
    {
      "type": "post",
      "url": "/user",
      "title": "Create a User",
      "version": "2.0.0",
      "name": "PostUser",
      "group": "Users",
      "permission": [
        {
          "name": "none"
        }
      ],
      "description": "<p>In this case &quot;apiErrorStructure&quot; is defined and used. Define blocks with params that will be used in several functions, so you don't have to rewrite them.</p>",
      "body": [
        {
          "group": "Body",
          "type": "String",
          "optional": false,
          "field": "name",
          "isArray": false,
          "description": "<p>Name of the User.</p>"
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>The Users-ID.</p>"
            }
          ]
        }
      },
      "use": [
        {
          "name": "CreateUserError"
        }
      ],
      "filename": "_apidoc.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/user"
        }
      ]
    },
    {
      "type": "post",
      "url": "/user",
      "title": "Missing URL parameter",
      "version": "2.0.0",
      "name": "PostUser",
      "group": "Users",
      "permission": [
        {
          "name": "none"
        }
      ],
      "description": "<p>@apiParam 'name' was defined but does not appear in URL of @api</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "String",
              "optional": false,
              "field": "name",
              "isArray": false,
              "description": "<p>Name of the User.</p>"
            }
          ]
        }
      },
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>The Users-ID.</p>"
            }
          ]
        }
      },
      "use": [
        {
          "name": "CreateUserError"
        }
      ],
      "filename": "example-warnings.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/user"
        }
      ]
    },
    {
      "type": "put",
      "url": "/user/:id",
      "title": "Change a User",
      "version": "3.0.0",
      "name": "PutUser",
      "group": "Users",
      "permission": [
        {
          "name": "none"
        }
      ],
      "description": "<p>This function has same errors like POST /user, but errors not defined again, they were included with &quot;apiErrorStructure&quot;</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "Number",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p><code>id</code> of the user.</p>"
            }
          ]
        }
      },
      "body": [
        {
          "group": "Body",
          "type": "String",
          "optional": false,
          "field": "name",
          "isArray": false,
          "description": "<p>Name of the User.</p>"
        },
        {
          "group": "Body",
          "type": "File",
          "optional": false,
          "field": "avatar",
          "isArray": false,
          "description": "<p>Upload avatar.</p>"
        }
      ],
      "use": [
        {
          "name": "CreateUserError"
        }
      ],
      "filename": "example.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/user/:id"
        }
      ]
    },
    {
      "type": "post",
      "url": "/user/:id",
      "title": "Thank a user: this is quite a long name indeed",
      "version": "3.0.0",
      "name": "ThankUser",
      "group": "Users",
      "description": "<p>This is here to have a long name in the left menu.</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "Number",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p><code>id</code> of the user.</p>"
            }
          ]
        }
      },
      "filename": "example.js"
    },
    {
      "type": "put",
      "url": "/api/users/:id",
      "title": "Update User Profile",
      "name": "UpdateUserProfile",
      "group": "Users",
      "version": "4.0.0",
      "description": "<p>Updates user profile information. Demonstrates partial interface usage for update operations.</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "Number",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>User's unique identifier</p>"
            }
          ],
          "Body": [
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "field": "name",
              "isArray": false,
              "description": "<p>User's full name</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "allowedValues": [
                "\"admin\"",
                "\"user\"",
                "\"moderator\""
              ],
              "optional": true,
              "field": "role",
              "isArray": false,
              "description": "<p>User role</p>"
            },
            {
              "group": "Body",
              "type": "Object",
              "optional": true,
              "field": "preferences",
              "isArray": false,
              "description": "<p>User preferences object</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "allowedValues": [
                "\"light\"",
                "\"dark\"",
                "\"auto\""
              ],
              "optional": true,
              "parentNode": {
                "path": "preferences",
                "field": "preferences",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.theme",
              "isArray": false,
              "description": "<p>UI theme preference</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "parentNode": {
                "path": "preferences",
                "field": "preferences",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.language",
              "isArray": false,
              "description": "<p>Language preference (ISO code)</p>"
            },
            {
              "group": "Body",
              "type": "String",
              "optional": true,
              "parentNode": {
                "path": "preferences",
                "field": "preferences",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.timezone",
              "isArray": false,
              "description": "<p>Timezone identifier</p>"
            },
            {
              "group": "Body",
              "type": "Object",
              "optional": true,
              "parentNode": {
                "path": "preferences",
                "field": "preferences",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.notifications",
              "isArray": false,
              "description": "<p>Notification settings</p>"
            },
            {
              "group": "Body",
              "type": "Boolean",
              "optional": true,
              "parentNode": {
                "path": "preferences.notifications",
                "parentNode": {
                  "path": "preferences",
                  "field": "preferences",
                  "type": "Object",
                  "isArray": false
                },
                "field": "preferences.notifications",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.notifications.email",
              "isArray": false,
              "description": "<p>Email notifications</p>"
            },
            {
              "group": "Body",
              "type": "Boolean",
              "optional": true,
              "parentNode": {
                "path": "preferences.notifications",
                "parentNode": {
                  "path": "preferences",
                  "field": "preferences",
                  "type": "Object",
                  "isArray": false
                },
                "field": "preferences.notifications",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.notifications.push",
              "isArray": false,
              "description": "<p>Push notifications</p>"
            },
            {
              "group": "Body",
              "type": "Boolean",
              "optional": true,
              "parentNode": {
                "path": "preferences.notifications",
                "parentNode": {
                  "path": "preferences",
                  "field": "preferences",
                  "type": "Object",
                  "isArray": false
                },
                "field": "preferences.notifications",
                "type": "Object",
                "isArray": false
              },
              "field": "preferences.notifications.sms",
              "isArray": false,
              "description": "<p>SMS notifications</p>"
            }
          ]
        }
      },
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "Number",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>Id</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "email",
              "isArray": false,
              "description": "<p>Email</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "name",
              "isArray": false,
              "description": "<p>Name</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "allowedValues": [
                "' | '",
                "' | '"
              ],
              "optional": false,
              "field": "role",
              "isArray": false,
              "description": "<p>Role</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "created_at",
              "isArray": false,
              "description": "<p>Created_at</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "updated_at",
              "isArray": false,
              "description": "<p>Updated_at</p>"
            },
            {
              "group": "Success 200",
              "type": "Object",
              "optional": true,
              "field": "preferences",
              "isArray": false,
              "description": "<p>Preferences</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "allowedValues": [
                "' | '",
                "' | '"
              ],
              "optional": false,
              "field": "theme",
              "isArray": false,
              "description": "<p>Theme</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "language",
              "isArray": false,
              "description": "<p>Language</p>"
            },
            {
              "group": "Success 200",
              "type": "String",
              "optional": false,
              "field": "timezone",
              "isArray": false,
              "description": "<p>Timezone</p>"
            },
            {
              "group": "Success 200",
              "type": "Object",
              "optional": false,
              "field": "notifications",
              "isArray": false,
              "description": "<p>Notifications</p>"
            },
            {
              "group": "Success 200",
              "type": "Boolean",
              "optional": false,
              "field": "push",
              "isArray": false,
              "description": "<p>Push</p>"
            },
            {
              "group": "Success 200",
              "type": "Boolean",
              "optional": false,
              "field": "sms",
              "isArray": false,
              "description": "<p>Sms</p>"
            }
          ]
        }
      },
      "examples": [
        {
          "title": "Request Example:",
          "content": "{\n  \"name\": \"John Smith\",\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"notifications\": {\n      \"email\": true,\n      \"push\": false\n    }\n  }\n}",
          "type": "json"
        }
      ],
      "filename": "schema-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/users/:id"
        }
      ]
    },
    {
      "type": "post",
      "url": "/api/users",
      "title": "Create new user",
      "name": "createUser",
      "description": "Creates a new user account",
      "version": "2.1.0",
      "openapi": {
        "paths": {
          "/api/users": {
            "post": {
              "summary": "Create new user",
              "description": "Creates a new user account",
              "operationId": "createUser",
              "x-version": "2.1.0",
              "tags": [
                "Users"
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "name",
                        "email"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 100,
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "john@example.com"
                        },
                        "age": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 150,
                          "example": 30
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "User created successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/User"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "created_at": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "group": "Users",
      "filename": "openapi-native-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/users"
        }
      ]
    },
    {
      "type": "get",
      "url": "/api/users/:id",
      "title": "Get user by ID",
      "name": "getApiUsersId",
      "description": "Retrieve detailed information about a specific user by their unique identifier",
      "version": "4.0.0",
      "openapi": {
        "paths": {
          "/api/users/{id}": {
            "get": {
              "summary": "Get user by ID",
              "description": "Retrieve detailed information about a specific user by their unique identifier",
              "tags": [
                "Users"
              ],
              "x-version": "4.0.0",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "description": "User's unique identifier"
                },
                {
                  "name": "include",
                  "in": "query",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "enum": [
                      "profile",
                      "settings",
                      "preferences"
                    ]
                  },
                  "description": "Additional data to include in response"
                }
              ],
              "responses": {
                "200": {
                  "description": "User found successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                },
                "404": {
                  "description": "User not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameter": [
        {
          "group": "Parameter",
          "type": "Number",
          "optional": false,
          "field": "id",
          "description": "User's unique identifier"
        },
        {
          "group": "Parameter",
          "type": "String",
          "optional": true,
          "field": "include",
          "description": "Additional data to include in response"
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success",
              "type": "Number",
              "optional": false,
              "field": "id",
              "description": "User's unique identifier"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "email",
              "description": "User's email address"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "name",
              "description": "User's full name"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": true,
              "field": "role",
              "description": "User's role in the system",
              "allowedValues": [
                "admin",
                "user",
                "moderator"
              ]
            },
            {
              "group": "Success",
              "type": "Object",
              "optional": true,
              "field": "profile",
              "description": ""
            }
          ]
        }
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "error",
              "description": "Error code"
            },
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "message",
              "description": "Human-readable error message"
            },
            {
              "group": "Error",
              "type": "Object",
              "optional": true,
              "field": "details",
              "description": "Additional error details"
            }
          ]
        }
      },
      "group": "Users",
      "filename": "openapi-external-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/users/:id"
        }
      ]
    },
    {
      "type": "get",
      "url": "/api/users/:id",
      "title": "Get user by ID",
      "name": "getUserById",
      "description": "Retrieve a specific user by their unique identifier",
      "version": "4.0.0",
      "openapi": {
        "paths": {
          "/api/users/{id}": {
            "get": {
              "summary": "Get user by ID",
              "description": "Retrieve a specific user by their unique identifier",
              "operationId": "getUserById",
              "tags": [
                "Users"
              ],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "User ID",
                  "schema": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "User found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                },
                "404": {
                  "description": "User not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameter": [
        {
          "group": "Parameter",
          "type": "Number",
          "optional": false,
          "field": "id",
          "description": "User ID"
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success",
              "type": "String",
              "field": "data",
              "description": "",
              "optional": false
            }
          ]
        }
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error",
              "type": "String",
              "field": "data",
              "description": "",
              "optional": false
            }
          ]
        }
      },
      "group": "Users",
      "filename": "openapi-native-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/users/:id"
        }
      ]
    },
    {
      "type": "post",
      "url": "/api/users",
      "title": "Create new user",
      "name": "postApiUsers",
      "description": "Create a new user account with the provided information",
      "version": "4.0.0",
      "openapi": {
        "paths": {
          "/api/users": {
            "post": {
              "summary": "Create new user",
              "description": "Create a new user account with the provided information",
              "tags": [
                "Users"
              ],
              "x-version": "4.0.0",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CreateUserRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "User created successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid request data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameter": [
        {
          "group": "Parameter",
          "type": "Number",
          "optional": false,
          "field": "id",
          "description": "User's unique identifier"
        },
        {
          "group": "Parameter",
          "type": "String",
          "optional": true,
          "field": "include",
          "description": "Additional data to include in response"
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success",
              "type": "Number",
              "optional": false,
              "field": "id",
              "description": "User's unique identifier"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "email",
              "description": "User's email address"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "name",
              "description": "User's full name"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": true,
              "field": "role",
              "description": "User's role in the system",
              "allowedValues": [
                "admin",
                "user",
                "moderator"
              ]
            },
            {
              "group": "Success",
              "type": "Object",
              "optional": true,
              "field": "profile",
              "description": ""
            }
          ]
        }
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "error",
              "description": "Error code"
            },
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "message",
              "description": "Human-readable error message"
            },
            {
              "group": "Error",
              "type": "Object",
              "optional": true,
              "field": "details",
              "description": "Additional error details"
            }
          ]
        }
      },
      "group": "Users",
      "body": [
        {
          "group": "Success",
          "type": "String",
          "optional": false,
          "field": "email",
          "description": "User's email address"
        },
        {
          "group": "Success",
          "type": "String",
          "optional": false,
          "field": "name",
          "description": "User's full name"
        },
        {
          "group": "Success",
          "type": "String",
          "optional": false,
          "field": "password",
          "description": "User's password"
        },
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "role",
          "description": "User's initial role",
          "allowedValues": [
            "user",
            "moderator"
          ]
        }
      ],
      "filename": "openapi-external-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/users"
        }
      ]
    },
    {
      "type": "post",
      "url": "/api/users",
      "title": "Create new user",
      "name": "postApiUsers",
      "description": "<p>This endpoint is loaded from an external OpenAPI specification but can still be enhanced with additional APIDoc tags for documentation.</p>",
      "version": "2.1.0",
      "openapi": {
        "paths": {
          "/api/users": {
            "post": {
              "summary": "Create new user",
              "description": "Create a new user account with the provided information",
              "tags": [
                "Users"
              ],
              "x-version": "4.0.0",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CreateUserRequest"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "User created successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid request data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "body": [
        {
          "group": "Success",
          "type": "String",
          "optional": false,
          "field": "email",
          "description": "User's email address"
        },
        {
          "group": "Success",
          "type": "String",
          "optional": false,
          "field": "name",
          "description": "User's full name"
        },
        {
          "group": "Success",
          "type": "String",
          "optional": false,
          "field": "password",
          "description": "User's password"
        },
        {
          "group": "Success",
          "type": "String",
          "optional": true,
          "field": "role",
          "description": "User's initial role",
          "allowedValues": [
            "user",
            "moderator"
          ]
        }
      ],
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success",
              "type": "Number",
              "optional": false,
              "field": "id",
              "description": "User's unique identifier"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "email",
              "description": "User's email address"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": false,
              "field": "name",
              "description": "User's full name"
            },
            {
              "group": "Success",
              "type": "String",
              "optional": true,
              "field": "role",
              "description": "User's role in the system",
              "allowedValues": [
                "admin",
                "user",
                "moderator"
              ]
            },
            {
              "group": "Success",
              "type": "Object",
              "optional": true,
              "field": "profile",
              "description": ""
            }
          ]
        }
      },
      "error": {
        "fields": {
          "Error 4xx": [
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "error",
              "description": "Error code"
            },
            {
              "group": "Error",
              "type": "String",
              "optional": false,
              "field": "message",
              "description": "Human-readable error message"
            },
            {
              "group": "Error",
              "type": "Object",
              "optional": true,
              "field": "details",
              "description": "Additional error details"
            }
          ]
        }
      },
      "group": "Users",
      "examples": [
        {
          "title": "Example Request:",
          "content": "curl -X POST https://api.example.com/api/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"John Doe\", \"email\": \"john@example.com\"}'",
          "type": "curl"
        }
      ],
      "filename": "openapi-external-examples.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/users"
        }
      ]
    },
    {
      "type": "GET",
      "url": "/resource/:resId",
      "title": "Mismatched URL Parameter",
      "name": "GetResource",
      "group": "Warnings",
      "version": "2.0.0",
      "description": "<p>URL contains a parameter ':resId' that is not documented as @apiParam in @api</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "String",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": ""
            }
          ]
        }
      },
      "filename": "example-warnings.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/resource/:resId"
        }
      ]
    },
    {
      "type": "GET",
      "url": "/resource/:resId/sub/:subId",
      "title": "Undocumented URL Parameter",
      "name": "GetSubResource",
      "group": "Warnings",
      "version": "2.0.0",
      "description": "<p>URL contains a parameter ':resId' that is not documented as @apiParam in @api</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "String",
              "optional": false,
              "field": "subId",
              "isArray": false,
              "description": ""
            }
          ]
        }
      },
      "filename": "example-warnings.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/resource/:resId/sub/:subId"
        }
      ]
    },
    {
      "type": "get",
      "url": "/user/:id",
      "title": "Unused URL Parameter",
      "name": "GetUnused",
      "group": "Warnings",
      "version": "2.0.0",
      "description": "<p>':oops' was defined but does not appear in URL of @api</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "type": "Number",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": "<p>user id</p>"
            },
            {
              "group": "Parameter",
              "type": "String",
              "optional": false,
              "field": "oops",
              "isArray": false,
              "description": "<p>some leftover</p>"
            }
          ]
        }
      },
      "filename": "example-warnings.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/user/:id"
        }
      ]
    },
    {
      "type": "post",
      "url": "/api/school/students/:studentId/cloth",
      "title": "Multiple Warnings",
      "name": "createCloth",
      "group": "Warnings",
      "version": "2.0.0",
      "description": "<p>@apiParam 'id' was defined but does not appear in URL of @api URL contains a parameter ':studentId' that is not documented as @apiParam in @api</p>",
      "parameter": {
        "fields": {
          "Parameter": [
            {
              "group": "Parameter",
              "optional": false,
              "field": "id",
              "isArray": false,
              "description": ""
            }
          ],
          "body": [
            {
              "group": "body",
              "type": "String",
              "optional": true,
              "field": "name",
              "isArray": false,
              "description": ""
            }
          ]
        }
      },
      "success": {
        "fields": {
          "Success 200": [
            {
              "group": "Success 200",
              "type": "Number",
              "optional": false,
              "field": "code",
              "isArray": false,
              "description": "<p>200</p>"
            }
          ]
        },
        "examples": [
          {
            "title": "Success-Response:",
            "content": "{\n     status: 200\n}",
            "type": "json"
          }
        ]
      },
      "filename": "example-warnings.js",
      "sampleRequest": [
        {
          "url": "https://apidoc.free.beeceptor.com/api/school/students/:studentId/cloth"
        }
      ]
    }
  ],
  "collections": {
    "info": {
      "name": "LexCorp Api documentation",
      "description": "Documentation for the REST api access provided at LexCorp",
      "version": "4.0.0",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "name": "Authentication",
        "item": [
          {
            "name": "User Authentication",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/auth/login",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "auth",
                  "login"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"\",\n  \"password\": \"\",\n  \"remember_me\": \"false\",\n  \"device_name\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Authenticates a user and returns an access token. This endpoint combines manual parameter documentation with schema-based responses.</p>"
            },
            "response": [
              {
                "name": "Success Response:",
                "originalRequest": {},
                "status": "OK",
                "code": 200,
                "header": [],
                "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"refresh_token\": \"def502004d8f9c...\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"user\": {\n      \"id\": 123,\n      \"email\": \"jane.doe@example.com\",\n      \"name\": \"Jane Doe\",\n      \"role\": \"user\"\n    }\n  }\n}"
              }
            ]
          }
        ]
      },
      {
        "name": "Category",
        "item": [
          {
            "name": "Delete a category",
            "request": {
              "method": "DELETE",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/category",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "category"
                ]
              },
              "body": null,
              "description": "<p>Delete a category. Sample request has been disabled here.</p>"
            },
            "response": []
          },
          {
            "name": "Get a category",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/category",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "category"
                ]
              },
              "body": null,
              "description": "<p>Get a category. Sample request on example.com here.</p>"
            },
            "response": []
          }
        ]
      },
      {
        "name": "City",
        "item": [
          {
            "name": "Create a new city",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/city",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "city"
                ]
              },
              "body": null,
              "description": "<p>Create a new city.</p>"
            },
            "response": []
          }
        ]
      },
      {
        "name": "Company",
        "item": [
          {
            "name": "Create Soft Update",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/company/soft-updates",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "company",
                  "soft-updates"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\",\n  \"type\": \"\",\n  \"value\": \"\",\n  \"effective_from\": \"\",\n  \"expires_at\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Creates a new soft configuration update. Demonstrates nested interface handling.</p>"
            },
            "response": []
          },
          {
            "name": "Update Company Pricing",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/company/pricing",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "company",
                  "pricing"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"default_plan_type\": \"\",\n  \"default_billing_currency\": \"\",\n  \"default_surge\": \"\",\n  \"active\": \"\",\n  \"multiplier\": \"\",\n  \"fixed_extra\": \"\",\n  \"services_types\": \"\",\n  \"type\": \"\",\n  \"value\": \"\",\n  \"value_driver\": \"\",\n  \"value_km\": \"\",\n  \"km\": \"\",\n  \"high_demand_active\": \"\",\n  \"high_demand\": \"\",\n  \"soft_updates\": \"\",\n  \"hard_overwrites\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Updates the pricing configuration for a company. This endpoint demonstrates TypeScript interface integration with apiSchema.</p>"
            },
            "response": [
              {
                "name": "Success Response:",
                "originalRequest": {},
                "status": "OK",
                "code": 200,
                "header": [],
                "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 123,\n    \"message\": \"Pricing updated successfully\"\n  }\n}"
              }
            ]
          }
        ]
      },
      {
        "name": "Examples",
        "item": [
          {
            "name": "Example with Generic Interface",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/responses/generic",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "responses",
                  "generic"
                ]
              },
              "body": null,
              "description": "<p>This example shows how complex interfaces with generics and index signatures are automatically simplified.</p>"
            },
            "response": [
              {
                "name": "Success Response:",
                "originalRequest": {},
                "status": "OK",
                "code": 200,
                "header": [],
                "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": \"any type of data\"\n}"
              }
            ]
          },
          {
            "name": "Complex Interface Example",
            "request": {
              "method": "PUT",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/responses/complex",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "responses",
                  "complex"
                ]
              },
              "body": null,
              "description": "<p>Demonstrates resilient parsing of interfaces with:</p> <ul> <li>Generic type parameters (T, K, V) -&gt; converted to Mixed</li> <li>Index signatures [key: string]: unknown -&gt; ignored</li> <li>Complex nested structures -&gt; properly handled</li> </ul>"
            },
            "response": []
          },
          {
            "name": "Inline OpenAPI example",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/inline-example",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "inline-example"
                ]
              },
              "body": null,
              "description": "This is defined directly in the comment"
            },
            "response": []
          }
        ]
      },
      {
        "name": "Files",
        "item": [
          {
            "name": "Upload File",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/files/upload",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "files",
                  "upload"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"file\": \"\",\n  \"description\": \"\",\n  \"visibility\": \"private\",\n  \"tags\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Uploads a file to the server. Demonstrates mixed schema and manual documentation for multipart requests.</p>"
            },
            "response": [
              {
                "name": "Success Response:",
                "originalRequest": {},
                "status": "OK",
                "code": 200,
                "header": [],
                "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"file_id\": \"f7c8b3e2-4d5a-4f9c-8b2e-1a3d7c9e4f5b\",\n    \"filename\": \"document.pdf\",\n    \"size\": 1024768,\n    \"mime_type\": \"application/pdf\",\n    \"url\": \"https://api.example.com/files/f7c8b3e2-4d5a-4f9c-8b2e-1a3d7c9e4f5b\",\n    \"uploaded_at\": \"2024-01-20T15:30:00Z\"\n  }\n}"
              }
            ]
          }
        ]
      },
      {
        "name": "Files_Management",
        "item": [
          {
            "name": "Upload user avatar",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/users/:id/avatar",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "users",
                  ":id",
                  "avatar"
                ]
              },
              "body": null,
              "description": "Uploads a new avatar image for the user"
            },
            "response": []
          }
        ]
      },
      {
        "name": "Mqtt",
        "item": [
          {
            "name": "PublishCommandAck",
            "request": {
              "method": "PUBLISH",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}v1/{tenant}/devices/{deviceId}/commands/ack",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "v1",
                  "{tenant}",
                  "devices",
                  "{deviceId}",
                  "commands",
                  "ack"
                ]
              },
              "body": null,
              "description": ""
            },
            "response": []
          },
          {
            "name": "PublishDeviceStatus",
            "request": {
              "method": "PUBLISH",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}v1/{tenant}/devices/{deviceId}/status",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "v1",
                  "{tenant}",
                  "devices",
                  "{deviceId}",
                  "status"
                ]
              },
              "body": null,
              "description": ""
            },
            "response": []
          },
          {
            "name": "PublishTelemetry",
            "request": {
              "method": "INLINE",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}v1/{tenant}/devices/{deviceId}/telemetry",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "v1",
                  "{tenant}",
                  "devices",
                  "{deviceId}",
                  "telemetry"
                ]
              },
              "body": null,
              "description": "Maximum telemetry frequency per device"
            },
            "response": []
          },
          {
            "name": "SubscribeAlerts",
            "request": {
              "method": "SUBSCRIBE",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}v1/{tenant}/devices/+/alerts",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "v1",
                  "{tenant}",
                  "devices",
                  "+",
                  "alerts"
                ]
              },
              "body": null,
              "description": ""
            },
            "response": []
          },
          {
            "name": "SubscribeCommands",
            "request": {
              "method": "INLINE",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}v1/{tenant}/devices/{deviceId}/commands",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "v1",
                  "{tenant}",
                  "devices",
                  "{deviceId}",
                  "commands"
                ]
              },
              "body": null,
              "description": "Command rate limit per device"
            },
            "response": []
          },
          {
            "name": "SubscribeConfig",
            "request": {
              "method": "SUBSCRIBE",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}v1/{tenant}/devices/{deviceId}/config",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "v1",
                  "{tenant}",
                  "devices",
                  "{deviceId}",
                  "config"
                ]
              },
              "body": null,
              "description": ""
            },
            "response": []
          }
        ]
      },
      {
        "name": "Products",
        "item": [
          {
            "name": "Update product",
            "request": {
              "method": "PUT",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/products/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "products",
                  ":id"
                ]
              },
              "body": null,
              "description": "Update product information"
            },
            "response": []
          },
          {
            "name": "Update product",
            "request": {
              "method": "PUT",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/products/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "products",
                  ":id"
                ]
              },
              "body": null,
              "description": "Update product information"
            },
            "response": []
          },
          {
            "name": "Update product",
            "request": {
              "method": "PUT",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/products/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "products",
                  ":id"
                ]
              },
              "body": null,
              "description": "Update product information"
            },
            "response": []
          }
        ]
      },
      {
        "name": "Schemas",
        "item": [
          {
            "name": "Schema: Error",
            "request": {
              "method": "OPENAPI-SCHEMA",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": []
              },
              "body": null,
              "description": "OpenAPI schema definition for Error (Type: object)"
            },
            "response": []
          },
          {
            "name": "Schema: User",
            "request": {
              "method": "OPENAPI-SCHEMA",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": []
              },
              "body": null,
              "description": "OpenAPI schema definition for User (Type: object)"
            },
            "response": []
          },
          {
            "name": "Schema: UserListResponse",
            "request": {
              "method": "OPENAPI-SCHEMA",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/users",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "users"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"page\": \"1\",\n  \"limit\": \"10\",\n  \"sort\": \"name\",\n  \"order\": \"asc\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "OpenAPI schema definition for UserListResponse (Type: object)"
            },
            "response": []
          }
        ]
      },
      {
        "name": "System",
        "item": [
          {
            "name": "Health Check",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/health",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "health"
                ]
              },
              "body": null,
              "description": "<p>Simple health check endpoint. Demonstrates minimal schema usage.</p>"
            },
            "response": [
              {
                "name": "Success Response:",
                "originalRequest": {},
                "status": "OK",
                "code": 200,
                "header": [],
                "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"message\": \"Service is healthy\",\n  \"data\": {\n    \"status\": \"ok\",\n    \"timestamp\": \"2024-01-20T15:30:00Z\",\n    \"version\": \"4.0.0\"\n  }\n}"
              }
            ]
          }
        ]
      },
      {
        "name": "User_Management",
        "item": [
          {
            "name": "Update user",
            "request": {
              "method": "OPENAPI-OPERATION",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": []
              },
              "body": null,
              "description": "Updates an existing user's information"
            },
            "response": []
          }
        ]
      },
      {
        "name": "Users",
        "item": [
          {
            "name": "Create User Account",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/users",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "users"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"\",\n  \"name\": \"\",\n  \"password\": \"\",\n  \"role\": \"\",\n  \"preferences\": \"\",\n  \"preferences.theme\": \"\",\n  \"preferences.language\": \"\",\n  \"preferences.timezone\": \"\",\n  \"preferences.notifications\": \"\",\n  \"preferences.notifications.email\": \"\",\n  \"preferences.notifications.push\": \"\",\n  \"preferences.notifications.sms\": \"\",\n  \"metadata\": \"\",\n  \"metadata.source\": \"\",\n  \"metadata.referrer\": \"\",\n  \"metadata.marketing_consent\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Creates a new user account with the provided information. This endpoint demonstrates JSON Schema integration for request validation.</p>"
            },
            "response": [
              {
                "name": "Success Response:",
                "originalRequest": {},
                "status": "OK",
                "code": 200,
                "header": [],
                "body": "HTTP/1.1 201 Created\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 123,\n    \"email\": \"jane.doe@example.com\",\n    \"name\": \"Jane Doe\",\n    \"role\": \"user\",\n    \"created_at\": \"2024-01-20T15:30:00Z\"\n  }\n}"
              }
            ]
          },
          {
            "name": "Delete user",
            "request": {
              "method": "DELETE",
              "header": [
                {
                  "key": "Authorization",
                  "value": "",
                  "description": "<p>The token can be generated from your user profile.</p>",
                  "disabled": false
                }
              ],
              "url": {
                "raw": "{{baseUrl}}/user/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "user",
                  ":id"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Be careful! This will remove all the data associated with that user!</p>"
            },
            "response": [
              {
                "name": "Success-Example",
                "originalRequest": {},
                "status": "OK",
                "code": 200,
                "header": [],
                "body": "HTTP/1.1 200 OK\n{\n    \"result\": \"ok\"\n}"
              }
            ]
          },
          {
            "name": "Read data of a User",
            "request": {
              "method": "GET",
              "header": [
                {
                  "key": "Authorization",
                  "value": "",
                  "description": "<p>The token can be generated from your user profile.</p>",
                  "disabled": false
                },
                {
                  "key": "X-Apidoc-Cool-Factor",
                  "value": "big",
                  "description": "<p>Some other header with a default value.</p>",
                  "disabled": false
                }
              ],
              "url": {
                "raw": "{{baseUrl}}/user/:region/:id/:opt",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "user",
                  ":region",
                  ":id",
                  ":opt"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\",\n  \"region\": \"fr-par\",\n  \"opt\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Compare version 3.0.0 with 2.0.0 and you will see the green markers with new items in version 3.0.0 and red markers with removed items since 2.0.0.</p>"
            },
            "response": []
          },
          {
            "name": "Read data of a User",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/user/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "user",
                  ":id"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Here you can describe the function. Multilines are possible.</p>"
            },
            "response": []
          },
          {
            "name": "Read data of a User",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/user/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "user",
                  ":id"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Here you can describe the function. Multilines are possible.</p>"
            },
            "response": []
          },
          {
            "name": "Get User Profile",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/users/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "users",
                  ":id"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Retrieves detailed profile information for a specific user.</p>"
            },
            "response": [
              {
                "name": "Success Response:",
                "originalRequest": {},
                "status": "OK",
                "code": 200,
                "header": [],
                "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"email\": \"john@example.com\",\n    \"name\": \"John Doe\",\n    \"role\": \"user\",\n    \"created_at\": \"2024-01-15T10:30:00Z\",\n    \"updated_at\": \"2024-01-20T14:45:00Z\",\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"language\": \"en\",\n      \"timezone\": \"UTC\",\n      \"notifications\": {\n        \"email\": true,\n        \"push\": true,\n        \"sms\": false\n      }\n    }\n  }\n}"
              }
            ]
          },
          {
            "name": "Get Users List",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/users",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "users"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"limit\": \"10\",\n  \"page\": \"1\",\n  \"sort_by\": \"created_at\",\n  \"sort_order\": \"desc\",\n  \"search\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Retrieves a paginated list of users. Demonstrates complex generic interface usage with pagination.</p>"
            },
            "response": [
              {
                "name": "Success Response:",
                "originalRequest": {},
                "status": "OK",
                "code": 200,
                "header": [],
                "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"email\": \"john@example.com\",\n      \"name\": \"John Doe\",\n      \"role\": \"user\",\n      \"created_at\": \"2024-01-15T10:30:00Z\",\n      \"updated_at\": \"2024-01-20T14:45:00Z\"\n    }\n  ],\n  \"meta\": {\n    \"current_page\": 1,\n    \"per_page\": 10,\n    \"total\": 25,\n    \"total_pages\": 3,\n    \"has_next\": true,\n    \"has_prev\": false\n  }\n}"
              }
            ]
          },
          {
            "name": "Create a new User",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/user",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "user"
                ]
              },
              "body": null,
              "description": "<p>In this case &quot;apiErrorStructure&quot; is defined and used. Define blocks with params that will be used in several functions, so you don't have to rewrite them.</p>"
            },
            "response": []
          },
          {
            "name": "Create a User",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/user",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "user"
                ]
              },
              "body": null,
              "description": "<p>In this case &quot;apiErrorStructure&quot; is defined and used. Define blocks with params that will be used in several functions, so you don't have to rewrite them.</p>"
            },
            "response": []
          },
          {
            "name": "Missing URL parameter",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/user",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "user"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>@apiParam 'name' was defined but does not appear in URL of @api</p>"
            },
            "response": []
          },
          {
            "name": "Change a User",
            "request": {
              "method": "PUT",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/user/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "user",
                  ":id"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>This function has same errors like POST /user, but errors not defined again, they were included with &quot;apiErrorStructure&quot;</p>"
            },
            "response": []
          },
          {
            "name": "Thank a user: this is quite a long name indeed",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/user/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "user",
                  ":id"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>This is here to have a long name in the left menu.</p>"
            },
            "response": []
          },
          {
            "name": "Update User Profile",
            "request": {
              "method": "PUT",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/users/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "users",
                  ":id"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\",\n  \"name\": \"\",\n  \"role\": \"\",\n  \"preferences\": \"\",\n  \"preferences.theme\": \"\",\n  \"preferences.language\": \"\",\n  \"preferences.timezone\": \"\",\n  \"preferences.notifications\": \"\",\n  \"preferences.notifications.email\": \"\",\n  \"preferences.notifications.push\": \"\",\n  \"preferences.notifications.sms\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>Updates user profile information. Demonstrates partial interface usage for update operations.</p>"
            },
            "response": []
          },
          {
            "name": "Create new user",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/users",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "users"
                ]
              },
              "body": null,
              "description": "Creates a new user account"
            },
            "response": []
          },
          {
            "name": "Get user by ID",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/users/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "users",
                  ":id"
                ]
              },
              "body": null,
              "description": "Retrieve detailed information about a specific user by their unique identifier"
            },
            "response": []
          },
          {
            "name": "Get user by ID",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/users/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "users",
                  ":id"
                ]
              },
              "body": null,
              "description": "Retrieve a specific user by their unique identifier"
            },
            "response": []
          },
          {
            "name": "Create new user",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/users",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "users"
                ]
              },
              "body": null,
              "description": "Create a new user account with the provided information"
            },
            "response": []
          },
          {
            "name": "Create new user",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/users",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "users"
                ]
              },
              "body": null,
              "description": "<p>This endpoint is loaded from an external OpenAPI specification but can still be enhanced with additional APIDoc tags for documentation.</p>"
            },
            "response": []
          }
        ]
      },
      {
        "name": "Warnings",
        "item": [
          {
            "name": "Mismatched URL Parameter",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/resource/:resId",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "resource",
                  ":resId"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>URL contains a parameter ':resId' that is not documented as @apiParam in @api</p>"
            },
            "response": []
          },
          {
            "name": "Undocumented URL Parameter",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/resource/:resId/sub/:subId",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "resource",
                  ":resId",
                  "sub",
                  ":subId"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"subId\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>URL contains a parameter ':resId' that is not documented as @apiParam in @api</p>"
            },
            "response": []
          },
          {
            "name": "Unused URL Parameter",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/user/:id",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "user",
                  ":id"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\",\n  \"oops\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>':oops' was defined but does not appear in URL of @api</p>"
            },
            "response": []
          },
          {
            "name": "Multiple Warnings",
            "request": {
              "method": "POST",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/api/school/students/:studentId/cloth",
                "host": [
                  "{{baseUrl}}"
                ],
                "path": [
                  "api",
                  "school",
                  "students",
                  ":studentId",
                  "cloth"
                ]
              },
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"\",\n  \"name\": \"\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "description": "<p>@apiParam 'id' was defined but does not appear in URL of @api URL contains a parameter ':studentId' that is not documented as @apiParam in @api</p>"
            },
            "response": [
              {
                "name": "Success-Response:",
                "originalRequest": {},
                "status": "OK",
                "code": 200,
                "header": [],
                "body": "{\n     status: 200\n}"
              }
            ]
          }
        ]
      }
    ],
    "variable": [],
    "auth": null
  },
  "scenarios": {
    "scenarios": [
      {
        "id": "post__api_auth_login",
        "name": "User Authentication",
        "method": "POST",
        "url": "/api/auth/login",
        "description": "<p>Authenticates a user and returns an access token. This endpoint combines manual parameter documentation with schema-based responses.</p>",
        "group": "Authentication",
        "expectedResponses": [
          {
            "type": "success",
            "status": 200,
            "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"refresh_token\": \"def502004d8f9c...\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"user\": {\n      \"id\": 123,\n      \"email\": \"jane.doe@example.com\",\n      \"name\": \"Jane Doe\",\n      \"role\": \"user\"\n    }\n  }\n}",
            "description": "Success Response:"
          },
          {
            "type": "error",
            "status": 400,
            "body": "HTTP/1.1 401 Unauthorized\n{\n  \"success\": false,\n  \"message\": \"Invalid credentials\",\n  \"code\": \"INVALID_CREDENTIALS\"\n}",
            "description": "Authentication Error:"
          }
        ]
      },
      {
        "id": "delete__category",
        "name": "Delete a category",
        "method": "DELETE",
        "url": "/category",
        "description": "<p>Delete a category. Sample request has been disabled here.</p>",
        "group": "Category",
        "expectedResponses": []
      },
      {
        "id": "get__category",
        "name": "Get a category",
        "method": "GET",
        "url": "/category",
        "description": "<p>Get a category. Sample request on example.com here.</p>",
        "group": "Category",
        "expectedResponses": []
      },
      {
        "id": "post__city",
        "name": "Create a new city",
        "method": "POST",
        "url": "/city",
        "description": "<p>Create a new city.</p>",
        "group": "City",
        "expectedResponses": []
      },
      {
        "id": "post__api_company_soft_updates",
        "name": "Create Soft Update",
        "method": "POST",
        "url": "/api/company/soft-updates",
        "description": "<p>Creates a new soft configuration update. Demonstrates nested interface handling.</p>",
        "group": "Company",
        "expectedResponses": []
      },
      {
        "id": "post__api_company_pricing",
        "name": "Update Company Pricing",
        "method": "POST",
        "url": "/api/company/pricing",
        "description": "<p>Updates the pricing configuration for a company. This endpoint demonstrates TypeScript interface integration with apiSchema.</p>",
        "group": "Company",
        "expectedResponses": [
          {
            "type": "success",
            "status": 200,
            "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 123,\n    \"message\": \"Pricing updated successfully\"\n  }\n}",
            "description": "Success Response:"
          },
          {
            "type": "error",
            "status": 400,
            "body": "HTTP/1.1 400 Bad Request\n{\n  \"success\": false,\n  \"message\": \"Validation failed\",\n  \"code\": \"VALIDATION_ERROR\",\n  \"details\": {\n    \"field_errors\": {\n      \"default_billing_currency\": [\"Invalid currency code\"]\n    }\n  }\n}",
            "description": "Validation Error:"
          }
        ]
      },
      {
        "id": "post__api_responses_generic",
        "name": "Example with Generic Interface",
        "method": "POST",
        "url": "/api/responses/generic",
        "description": "<p>This example shows how complex interfaces with generics and index signatures are automatically simplified.</p>",
        "group": "Examples",
        "expectedResponses": [
          {
            "type": "success",
            "status": 200,
            "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": \"any type of data\"\n}",
            "description": "Success Response:"
          }
        ]
      },
      {
        "id": "put__api_responses_complex",
        "name": "Complex Interface Example",
        "method": "PUT",
        "url": "/api/responses/complex",
        "description": "<p>Demonstrates resilient parsing of interfaces with:</p> <ul> <li>Generic type parameters (T, K, V) -&gt; converted to Mixed</li> <li>Index signatures [key: string]: unknown -&gt; ignored</li> <li>Complex nested structures -&gt; properly handled</li> </ul>",
        "group": "Examples",
        "expectedResponses": []
      },
      {
        "id": "get__api_inline_example",
        "name": "Inline OpenAPI example",
        "method": "GET",
        "url": "/api/inline-example",
        "description": "This is defined directly in the comment",
        "group": "Examples",
        "expectedResponses": []
      },
      {
        "id": "post__api_files_upload",
        "name": "Upload File",
        "method": "POST",
        "url": "/api/files/upload",
        "description": "<p>Uploads a file to the server. Demonstrates mixed schema and manual documentation for multipart requests.</p>",
        "group": "Files",
        "expectedResponses": [
          {
            "type": "success",
            "status": 200,
            "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"file_id\": \"f7c8b3e2-4d5a-4f9c-8b2e-1a3d7c9e4f5b\",\n    \"filename\": \"document.pdf\",\n    \"size\": 1024768,\n    \"mime_type\": \"application/pdf\",\n    \"url\": \"https://api.example.com/files/f7c8b3e2-4d5a-4f9c-8b2e-1a3d7c9e4f5b\",\n    \"uploaded_at\": \"2024-01-20T15:30:00Z\"\n  }\n}",
            "description": "Success Response:"
          }
        ]
      },
      {
        "id": "post__api_users__id_avatar",
        "name": "Upload user avatar",
        "method": "POST",
        "url": "/api/users/:id/avatar",
        "description": "Uploads a new avatar image for the user",
        "group": "Files_Management",
        "expectedResponses": []
      },
      {
        "id": "publish_v1__tenant__devices__deviceId__commands_ack",
        "name": "publish v1/{tenant}/devices/{deviceId}/commands/ack",
        "method": "PUBLISH",
        "url": "v1/{tenant}/devices/{deviceId}/commands/ack",
        "description": "",
        "group": "Mqtt",
        "expectedResponses": []
      },
      {
        "id": "publish_v1__tenant__devices__deviceId__status",
        "name": "publish v1/{tenant}/devices/{deviceId}/status",
        "method": "PUBLISH",
        "url": "v1/{tenant}/devices/{deviceId}/status",
        "description": "",
        "group": "Mqtt",
        "expectedResponses": []
      },
      {
        "id": "inline_v1__tenant__devices__deviceId__telemetry",
        "name": "inline v1/{tenant}/devices/{deviceId}/telemetry",
        "method": "INLINE",
        "url": "v1/{tenant}/devices/{deviceId}/telemetry",
        "description": "Maximum telemetry frequency per device",
        "group": "Mqtt",
        "expectedResponses": []
      },
      {
        "id": "subscribe_v1__tenant__devices___alerts",
        "name": "subscribe v1/{tenant}/devices/+/alerts",
        "method": "SUBSCRIBE",
        "url": "v1/{tenant}/devices/+/alerts",
        "description": "",
        "group": "Mqtt",
        "expectedResponses": []
      },
      {
        "id": "inline_v1__tenant__devices__deviceId__commands",
        "name": "inline v1/{tenant}/devices/{deviceId}/commands",
        "method": "INLINE",
        "url": "v1/{tenant}/devices/{deviceId}/commands",
        "description": "Command rate limit per device",
        "group": "Mqtt",
        "expectedResponses": []
      },
      {
        "id": "subscribe_v1__tenant__devices__deviceId__config",
        "name": "subscribe v1/{tenant}/devices/{deviceId}/config",
        "method": "SUBSCRIBE",
        "url": "v1/{tenant}/devices/{deviceId}/config",
        "description": "",
        "group": "Mqtt",
        "expectedResponses": []
      },
      {
        "id": "put__api_products__id",
        "name": "Update product",
        "method": "PUT",
        "url": "/api/products/:id",
        "description": "Update product information",
        "group": "Products",
        "expectedResponses": []
      },
      {
        "id": "put__api_products__id",
        "name": "Update product",
        "method": "PUT",
        "url": "/api/products/:id",
        "description": "Update product information",
        "group": "Products",
        "expectedResponses": []
      },
      {
        "id": "put__api_products__id",
        "name": "Update product",
        "method": "PUT",
        "url": "/api/products/:id",
        "description": "Update product information",
        "group": "Products",
        "expectedResponses": []
      },
      {
        "id": "openapi_schema_",
        "name": "Schema: Error",
        "method": "OPENAPI-SCHEMA",
        "url": "",
        "description": "OpenAPI schema definition for Error (Type: object)",
        "group": "Schemas",
        "expectedResponses": []
      },
      {
        "id": "openapi_schema_",
        "name": "Schema: User",
        "method": "OPENAPI-SCHEMA",
        "url": "",
        "description": "OpenAPI schema definition for User (Type: object)",
        "group": "Schemas",
        "expectedResponses": []
      },
      {
        "id": "openapi_schema__api_users",
        "name": "Schema: UserListResponse",
        "method": "OPENAPI-SCHEMA",
        "url": "/api/users",
        "description": "OpenAPI schema definition for UserListResponse (Type: object)",
        "group": "Schemas",
        "expectedResponses": []
      },
      {
        "id": "get__api_health",
        "name": "Health Check",
        "method": "GET",
        "url": "/api/health",
        "description": "<p>Simple health check endpoint. Demonstrates minimal schema usage.</p>",
        "group": "System",
        "expectedResponses": [
          {
            "type": "success",
            "status": 200,
            "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"message\": \"Service is healthy\",\n  \"data\": {\n    \"status\": \"ok\",\n    \"timestamp\": \"2024-01-20T15:30:00Z\",\n    \"version\": \"4.0.0\"\n  }\n}",
            "description": "Success Response:"
          }
        ]
      },
      {
        "id": "openapi_operation_",
        "name": "Update user",
        "method": "OPENAPI-OPERATION",
        "url": "",
        "description": "Updates an existing user's information",
        "group": "User_Management",
        "expectedResponses": []
      },
      {
        "id": "post__api_users",
        "name": "Create User Account",
        "method": "POST",
        "url": "/api/users",
        "description": "<p>Creates a new user account with the provided information. This endpoint demonstrates JSON Schema integration for request validation.</p>",
        "group": "Users",
        "expectedResponses": [
          {
            "type": "success",
            "status": 200,
            "body": "HTTP/1.1 201 Created\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 123,\n    \"email\": \"jane.doe@example.com\",\n    \"name\": \"Jane Doe\",\n    \"role\": \"user\",\n    \"created_at\": \"2024-01-20T15:30:00Z\"\n  }\n}",
            "description": "Success Response:"
          },
          {
            "type": "error",
            "status": 400,
            "body": "HTTP/1.1 400 Bad Request\n{\n  \"success\": false,\n  \"message\": \"Validation failed\",\n  \"code\": \"VALIDATION_ERROR\",\n  \"details\": {\n    \"field_errors\": {\n      \"email\": [\"Email already exists\"],\n      \"password\": [\"Password must be at least 8 characters\"]\n    }\n  }\n}",
            "description": "Validation Error:"
          }
        ]
      },
      {
        "id": "delete__user__id",
        "name": "Delete user",
        "method": "DELETE",
        "url": "/user/:id",
        "description": "<p>Be careful! This will remove all the data associated with that user!</p>",
        "group": "Users",
        "expectedResponses": [
          {
            "type": "success",
            "status": 200,
            "body": "HTTP/1.1 200 OK\n{\n    \"result\": \"ok\"\n}",
            "description": "Success-Example"
          },
          {
            "type": "error",
            "status": 400,
            "body": "HTTP/1.1 401 Not Authenticated\n{\n  \"error\": \"NoAccessRight\"\n}",
            "description": "Response (example):"
          }
        ]
      },
      {
        "id": "get__user__region__id__opt",
        "name": "Read data of a User",
        "method": "GET",
        "url": "/user/:region/:id/:opt",
        "description": "<p>Compare version 3.0.0 with 2.0.0 and you will see the green markers with new items in version 3.0.0 and red markers with removed items since 2.0.0.</p>",
        "group": "Users",
        "expectedResponses": [
          {
            "type": "error",
            "status": 400,
            "body": "HTTP/1.1 401 Not Authenticated\n{\n  \"error\": \"NoAccessRight\"\n}",
            "description": "Response (example):"
          }
        ]
      },
      {
        "id": "get__user__id",
        "name": "Read data of a User",
        "method": "GET",
        "url": "/user/:id",
        "description": "<p>Here you can describe the function. Multilines are possible.</p>",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "get__user__id",
        "name": "Read data of a User",
        "method": "GET",
        "url": "/user/:id",
        "description": "<p>Here you can describe the function. Multilines are possible.</p>",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "get__api_users__id",
        "name": "Get User Profile",
        "method": "GET",
        "url": "/api/users/:id",
        "description": "<p>Retrieves detailed profile information for a specific user.</p>",
        "group": "Users",
        "expectedResponses": [
          {
            "type": "success",
            "status": 200,
            "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": 1,\n    \"email\": \"john@example.com\",\n    \"name\": \"John Doe\",\n    \"role\": \"user\",\n    \"created_at\": \"2024-01-15T10:30:00Z\",\n    \"updated_at\": \"2024-01-20T14:45:00Z\",\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"language\": \"en\",\n      \"timezone\": \"UTC\",\n      \"notifications\": {\n        \"email\": true,\n        \"push\": true,\n        \"sms\": false\n      }\n    }\n  }\n}",
            "description": "Success Response:"
          }
        ]
      },
      {
        "id": "get__api_users",
        "name": "Get Users List",
        "method": "GET",
        "url": "/api/users",
        "description": "<p>Retrieves a paginated list of users. Demonstrates complex generic interface usage with pagination.</p>",
        "group": "Users",
        "expectedResponses": [
          {
            "type": "success",
            "status": 200,
            "body": "HTTP/1.1 200 OK\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"email\": \"john@example.com\",\n      \"name\": \"John Doe\",\n      \"role\": \"user\",\n      \"created_at\": \"2024-01-15T10:30:00Z\",\n      \"updated_at\": \"2024-01-20T14:45:00Z\"\n    }\n  ],\n  \"meta\": {\n    \"current_page\": 1,\n    \"per_page\": 10,\n    \"total\": 25,\n    \"total_pages\": 3,\n    \"has_next\": true,\n    \"has_prev\": false\n  }\n}",
            "description": "Success Response:"
          }
        ]
      },
      {
        "id": "post__user",
        "name": "Create a new User",
        "method": "POST",
        "url": "/user",
        "description": "<p>In this case &quot;apiErrorStructure&quot; is defined and used. Define blocks with params that will be used in several functions, so you don't have to rewrite them.</p>",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "post__user",
        "name": "Create a User",
        "method": "POST",
        "url": "/user",
        "description": "<p>In this case &quot;apiErrorStructure&quot; is defined and used. Define blocks with params that will be used in several functions, so you don't have to rewrite them.</p>",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "post__user",
        "name": "Missing URL parameter",
        "method": "POST",
        "url": "/user",
        "description": "<p>@apiParam 'name' was defined but does not appear in URL of @api</p>",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "put__user__id",
        "name": "Change a User",
        "method": "PUT",
        "url": "/user/:id",
        "description": "<p>This function has same errors like POST /user, but errors not defined again, they were included with &quot;apiErrorStructure&quot;</p>",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "post__user__id",
        "name": "Thank a user: this is quite a long name indeed",
        "method": "POST",
        "url": "/user/:id",
        "description": "<p>This is here to have a long name in the left menu.</p>",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "put__api_users__id",
        "name": "Update User Profile",
        "method": "PUT",
        "url": "/api/users/:id",
        "description": "<p>Updates user profile information. Demonstrates partial interface usage for update operations.</p>",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "post__api_users",
        "name": "Create new user",
        "method": "POST",
        "url": "/api/users",
        "description": "Creates a new user account",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "get__api_users__id",
        "name": "Get user by ID",
        "method": "GET",
        "url": "/api/users/:id",
        "description": "Retrieve detailed information about a specific user by their unique identifier",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "get__api_users__id",
        "name": "Get user by ID",
        "method": "GET",
        "url": "/api/users/:id",
        "description": "Retrieve a specific user by their unique identifier",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "post__api_users",
        "name": "Create new user",
        "method": "POST",
        "url": "/api/users",
        "description": "Create a new user account with the provided information",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "post__api_users",
        "name": "Create new user",
        "method": "POST",
        "url": "/api/users",
        "description": "<p>This endpoint is loaded from an external OpenAPI specification but can still be enhanced with additional APIDoc tags for documentation.</p>",
        "group": "Users",
        "expectedResponses": []
      },
      {
        "id": "GET__resource__resId",
        "name": "Mismatched URL Parameter",
        "method": "GET",
        "url": "/resource/:resId",
        "description": "<p>URL contains a parameter ':resId' that is not documented as @apiParam in @api</p>",
        "group": "Warnings",
        "expectedResponses": []
      },
      {
        "id": "GET__resource__resId_sub__subId",
        "name": "Undocumented URL Parameter",
        "method": "GET",
        "url": "/resource/:resId/sub/:subId",
        "description": "<p>URL contains a parameter ':resId' that is not documented as @apiParam in @api</p>",
        "group": "Warnings",
        "expectedResponses": []
      },
      {
        "id": "get__user__id",
        "name": "Unused URL Parameter",
        "method": "GET",
        "url": "/user/:id",
        "description": "<p>':oops' was defined but does not appear in URL of @api</p>",
        "group": "Warnings",
        "expectedResponses": []
      },
      {
        "id": "post__api_school_students__studentId_cloth",
        "name": "Multiple Warnings",
        "method": "POST",
        "url": "/api/school/students/:studentId/cloth",
        "description": "<p>@apiParam 'id' was defined but does not appear in URL of @api URL contains a parameter ':studentId' that is not documented as @apiParam in @api</p>",
        "group": "Warnings",
        "expectedResponses": [
          {
            "type": "success",
            "status": 200,
            "body": "{\n     status: 200\n}",
            "description": "Success-Response:"
          }
        ]
      }
    ]
  },
  "generatedAt": "2025-09-29T13:41:08.872Z"
}
